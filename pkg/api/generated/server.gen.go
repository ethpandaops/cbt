// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for IntervalTypeTransformationFormat.
const (
	Date     IntervalTypeTransformationFormat = "date"
	Datetime IntervalTypeTransformationFormat = "datetime"
	Duration IntervalTypeTransformationFormat = "duration"
	Relative IntervalTypeTransformationFormat = "relative"
	Time     IntervalTypeTransformationFormat = "time"
)

// Defines values for ModelSummaryType.
const (
	ModelSummaryTypeExternal       ModelSummaryType = "external"
	ModelSummaryTypeTransformation ModelSummaryType = "transformation"
)

// Defines values for TransformationModelContentType.
const (
	TransformationModelContentTypeExec TransformationModelContentType = "exec"
	TransformationModelContentTypeSql  TransformationModelContentType = "sql"
)

// Defines values for TransformationModelMetadataLastRunStatus.
const (
	TransformationModelMetadataLastRunStatusFailed  TransformationModelMetadataLastRunStatus = "failed"
	TransformationModelMetadataLastRunStatusPending TransformationModelMetadataLastRunStatus = "pending"
	TransformationModelMetadataLastRunStatusRunning TransformationModelMetadataLastRunStatus = "running"
	TransformationModelMetadataLastRunStatusSuccess TransformationModelMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelType.
const (
	TransformationModelTypeIncremental TransformationModelType = "incremental"
	TransformationModelTypeScheduled   TransformationModelType = "scheduled"
)

// Defines values for TransformationModelBaseContentType.
const (
	TransformationModelBaseContentTypeExec TransformationModelBaseContentType = "exec"
	TransformationModelBaseContentTypeSql  TransformationModelBaseContentType = "sql"
)

// Defines values for TransformationModelBaseMetadataLastRunStatus.
const (
	TransformationModelBaseMetadataLastRunStatusFailed  TransformationModelBaseMetadataLastRunStatus = "failed"
	TransformationModelBaseMetadataLastRunStatusPending TransformationModelBaseMetadataLastRunStatus = "pending"
	TransformationModelBaseMetadataLastRunStatusRunning TransformationModelBaseMetadataLastRunStatus = "running"
	TransformationModelBaseMetadataLastRunStatusSuccess TransformationModelBaseMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelBaseType.
const (
	TransformationModelBaseTypeIncremental TransformationModelBaseType = "incremental"
	TransformationModelBaseTypeScheduled   TransformationModelBaseType = "scheduled"
)

// Defines values for ListAllModelsParamsType.
const (
	ListAllModelsParamsTypeExternal       ListAllModelsParamsType = "external"
	ListAllModelsParamsTypeTransformation ListAllModelsParamsType = "transformation"
)

// Defines values for ListTransformationsParamsType.
const (
	Incremental ListTransformationsParamsType = "incremental"
	Scheduled   ListTransformationsParamsType = "scheduled"
)

// Defines values for ListTransformationsParamsStatus.
const (
	Failed  ListTransformationsParamsStatus = "failed"
	Pending ListTransformationsParamsStatus = "pending"
	Running ListTransformationsParamsStatus = "running"
	Success ListTransformationsParamsStatus = "success"
)

// CoverageDetail defines model for CoverageDetail.
type CoverageDetail struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges All processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// CoverageSummary defines model for CoverageSummary.
type CoverageSummary struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges Processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Error Human-readable error message
	Error string `json:"error"`
}

// ExternalBounds defines model for ExternalBounds.
type ExternalBounds struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// InitialScanComplete Whether initial scan is complete
	InitialScanComplete *bool `json:"initial_scan_complete,omitempty"`

	// InitialScanStarted Timestamp when initial scan started
	InitialScanStarted *time.Time `json:"initial_scan_started,omitempty"`

	// LastFullScan Timestamp of last full scan
	LastFullScan *time.Time `json:"last_full_scan,omitempty"`

	// LastIncrementalScan Timestamp of last incremental scan
	LastIncrementalScan *time.Time `json:"last_incremental_scan,omitempty"`

	// Max Maximum position in external source
	Max int `json:"max"`

	// Min Minimum position in external source
	Min int `json:"min"`

	// PreviousMax Previous maximum position (for tracking changes)
	PreviousMax *int `json:"previous_max,omitempty"`

	// PreviousMin Previous minimum position (for tracking changes)
	PreviousMin *int `json:"previous_min,omitempty"`
}

// ExternalModel defines model for ExternalModel.
type ExternalModel struct {
	// Cache Cache configuration for external source
	Cache *struct {
		// FullScanInterval Interval for full cache refresh
		FullScanInterval *string `json:"full_scan_interval,omitempty"`

		// IncrementalScanInterval Interval for incremental cache updates
		IncrementalScanInterval *string `json:"incremental_scan_interval,omitempty"`
	} `json:"cache,omitempty"`
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration for external source
	Interval *struct {
		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Lag Number of blocks/slots to lag behind head
	Lag *int `json:"lag,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt    *time.Time `json:"created_at,omitempty"`
		LastSyncedAt *time.Time `json:"last_synced_at,omitempty"`

		// RowCount Approximate row count in destination table
		RowCount *int `json:"row_count,omitempty"`

		// SizeBytes Approximate table size in bytes
		SizeBytes *int       `json:"size_bytes,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`
}

// IntervalTypeTransformation A single transformation step for an interval type
type IntervalTypeTransformation struct {
	// Expression Optional CEL (Common Expression Language) expression to transform the value.
	// Uses 'value' as the input variable.
	// Supports math functions via math.* namespace (e.g., math.floor, math.ceil, math.round).
	// If omitted, value is passed through unchanged (identity transformation).
	Expression *string `json:"expression,omitempty"`

	// Format Optional display format hint for the frontend.
	// - datetime: Format as full date and time (e.g., "2024-01-15 14:30:00")
	// - date: Format as date only (e.g., "2024-01-15")
	// - time: Format as time only (e.g., "14:30:00")
	// - duration: Format as human-readable duration (e.g., "2h 30m")
	// - relative: Format as relative time (e.g., "2 hours ago")
	// If omitted, value is displayed as a raw number.
	Format *IntervalTypeTransformationFormat `json:"format,omitempty"`

	// Name Display name for this transformation
	Name string `json:"name"`
}

// IntervalTypeTransformationFormat Optional display format hint for the frontend.
// - datetime: Format as full date and time (e.g., "2024-01-15 14:30:00")
// - date: Format as date only (e.g., "2024-01-15")
// - time: Format as time only (e.g., "14:30:00")
// - duration: Format as human-readable duration (e.g., "2h 30m")
// - relative: Format as relative time (e.g., "2 hours ago")
// If omitted, value is displayed as a raw number.
type IntervalTypeTransformationFormat string

// ModelSummary Lightweight model representation for listings
type ModelSummary struct {
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id    string `json:"id"`
	Table string `json:"table"`

	// Type Model type
	Type ModelSummaryType `json:"type"`
}

// ModelSummaryType Model type
type ModelSummaryType string

// Range defines model for Range.
type Range struct {
	// Interval Size of processed range
	Interval int `json:"interval"`

	// Position Starting position of processed range
	Position int `json:"position"`
}

// ScheduledRun defines model for ScheduledRun.
type ScheduledRun struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// LastRun Timestamp of last execution
	LastRun *time.Time `json:"last_run,omitempty"`
}

// TransformationModel defines model for TransformationModel.
type TransformationModel struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelContentType `json:"content_type"`
	Database    string                         `json:"database"`

	// DependsOn Upstream model dependencies preserving AND/OR semantics.
	// - String elements represent required dependencies (AND logic)
	// - Array elements represent OR groups (at least one required)
	DependsOn   *[]TransformationModel_DependsOn_Item `json:"depends_on,omitempty"`
	Description *string                               `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration (present when type=incremental)
	Interval *struct {
		// Max Maximum interval size
		Max *int `json:"max,omitempty"`

		// Min Minimum interval size
		Min *int `json:"min,omitempty"`

		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Limits Limits (present when type=incremental)
	Limits *struct {
		// Max Maximum position limit
		Max *int `json:"max,omitempty"`

		// Min Minimum position limit
		Min *int `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                      `json:"row_count,omitempty"`
		SizeBytes     *int                                      `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`

	// Schedule Cron expression (present when type=scheduled)
	Schedule *string `json:"schedule,omitempty"`

	// Schedules Schedules (present when type=incremental)
	Schedules *struct {
		// Backfill Backfill schedule
		Backfill *string `json:"backfill,omitempty"`

		// Forwardfill Forward fill schedule
		Forwardfill *string `json:"forwardfill,omitempty"`
	} `json:"schedules,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelType `json:"type"`
}

// TransformationModelContentType Execution method (SQL query or shell command)
type TransformationModelContentType string

// TransformationModelDependsOn0 Single required dependency (AND logic)
type TransformationModelDependsOn0 = string

// TransformationModelDependsOn1 OR group - at least one dependency required
type TransformationModelDependsOn1 = []string

// TransformationModel_DependsOn_Item defines model for TransformationModel.depends_on.Item.
type TransformationModel_DependsOn_Item struct {
	union json.RawMessage
}

// TransformationModelMetadataLastRunStatus defines model for TransformationModel.Metadata.LastRunStatus.
type TransformationModelMetadataLastRunStatus string

// TransformationModelType Transformation type (scheduled or incremental)
type TransformationModelType string

// TransformationModelBase defines model for TransformationModelBase.
type TransformationModelBase struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelBaseContentType `json:"content_type"`
	Database    string                             `json:"database"`

	// DependsOn Upstream model dependencies preserving AND/OR semantics.
	// - String elements represent required dependencies (AND logic)
	// - Array elements represent OR groups (at least one required)
	DependsOn   *[]TransformationModelBase_DependsOn_Item `json:"depends_on,omitempty"`
	Description *string                                   `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                    `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                    `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelBaseMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                          `json:"row_count,omitempty"`
		SizeBytes     *int                                          `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                    `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelBaseType `json:"type"`
}

// TransformationModelBaseContentType Execution method (SQL query or shell command)
type TransformationModelBaseContentType string

// TransformationModelBaseDependsOn0 Single required dependency (AND logic)
type TransformationModelBaseDependsOn0 = string

// TransformationModelBaseDependsOn1 OR group - at least one dependency required
type TransformationModelBaseDependsOn1 = []string

// TransformationModelBase_DependsOn_Item defines model for TransformationModelBase.depends_on.Item.
type TransformationModelBase_DependsOn_Item struct {
	union json.RawMessage
}

// TransformationModelBaseMetadataLastRunStatus defines model for TransformationModelBase.Metadata.LastRunStatus.
type TransformationModelBaseMetadataLastRunStatus string

// TransformationModelBaseType Transformation type (scheduled or incremental)
type TransformationModelBaseType string

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ListAllModelsParams defines parameters for ListAllModels.
type ListAllModelsParams struct {
	// Type Filter by model type
	Type *ListAllModelsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Search Search by model ID or description (case-insensitive)
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListAllModelsParamsType defines parameters for ListAllModels.
type ListAllModelsParamsType string

// ListExternalModelsParams defines parameters for ListExternalModels.
type ListExternalModelsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListTransformationsParams defines parameters for ListTransformations.
type ListTransformationsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Type Filter by transformation type
	Type *ListTransformationsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by last run status
	Status *ListTransformationsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ListTransformationsParamsType defines parameters for ListTransformations.
type ListTransformationsParamsType string

// ListTransformationsParamsStatus defines parameters for ListTransformations.
type ListTransformationsParamsStatus string

// ListTransformationCoverageParams defines parameters for ListTransformationCoverage.
type ListTransformationCoverageParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListScheduledRunsParams defines parameters for ListScheduledRuns.
type ListScheduledRunsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// AsTransformationModelDependsOn0 returns the union data inside the TransformationModel_DependsOn_Item as a TransformationModelDependsOn0
func (t TransformationModel_DependsOn_Item) AsTransformationModelDependsOn0() (TransformationModelDependsOn0, error) {
	var body TransformationModelDependsOn0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelDependsOn0 overwrites any union data inside the TransformationModel_DependsOn_Item as the provided TransformationModelDependsOn0
func (t *TransformationModel_DependsOn_Item) FromTransformationModelDependsOn0(v TransformationModelDependsOn0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelDependsOn0 performs a merge with any union data inside the TransformationModel_DependsOn_Item, using the provided TransformationModelDependsOn0
func (t *TransformationModel_DependsOn_Item) MergeTransformationModelDependsOn0(v TransformationModelDependsOn0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTransformationModelDependsOn1 returns the union data inside the TransformationModel_DependsOn_Item as a TransformationModelDependsOn1
func (t TransformationModel_DependsOn_Item) AsTransformationModelDependsOn1() (TransformationModelDependsOn1, error) {
	var body TransformationModelDependsOn1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelDependsOn1 overwrites any union data inside the TransformationModel_DependsOn_Item as the provided TransformationModelDependsOn1
func (t *TransformationModel_DependsOn_Item) FromTransformationModelDependsOn1(v TransformationModelDependsOn1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelDependsOn1 performs a merge with any union data inside the TransformationModel_DependsOn_Item, using the provided TransformationModelDependsOn1
func (t *TransformationModel_DependsOn_Item) MergeTransformationModelDependsOn1(v TransformationModelDependsOn1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransformationModel_DependsOn_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransformationModel_DependsOn_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTransformationModelBaseDependsOn0 returns the union data inside the TransformationModelBase_DependsOn_Item as a TransformationModelBaseDependsOn0
func (t TransformationModelBase_DependsOn_Item) AsTransformationModelBaseDependsOn0() (TransformationModelBaseDependsOn0, error) {
	var body TransformationModelBaseDependsOn0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelBaseDependsOn0 overwrites any union data inside the TransformationModelBase_DependsOn_Item as the provided TransformationModelBaseDependsOn0
func (t *TransformationModelBase_DependsOn_Item) FromTransformationModelBaseDependsOn0(v TransformationModelBaseDependsOn0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelBaseDependsOn0 performs a merge with any union data inside the TransformationModelBase_DependsOn_Item, using the provided TransformationModelBaseDependsOn0
func (t *TransformationModelBase_DependsOn_Item) MergeTransformationModelBaseDependsOn0(v TransformationModelBaseDependsOn0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTransformationModelBaseDependsOn1 returns the union data inside the TransformationModelBase_DependsOn_Item as a TransformationModelBaseDependsOn1
func (t TransformationModelBase_DependsOn_Item) AsTransformationModelBaseDependsOn1() (TransformationModelBaseDependsOn1, error) {
	var body TransformationModelBaseDependsOn1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelBaseDependsOn1 overwrites any union data inside the TransformationModelBase_DependsOn_Item as the provided TransformationModelBaseDependsOn1
func (t *TransformationModelBase_DependsOn_Item) FromTransformationModelBaseDependsOn1(v TransformationModelBaseDependsOn1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelBaseDependsOn1 performs a merge with any union data inside the TransformationModelBase_DependsOn_Item, using the provided TransformationModelBaseDependsOn1
func (t *TransformationModelBase_DependsOn_Item) MergeTransformationModelBaseDependsOn1(v TransformationModelBaseDependsOn1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransformationModelBase_DependsOn_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransformationModelBase_DependsOn_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get interval type transformations
	// (GET /interval/types)
	GetIntervalTypes(c fiber.Ctx) error
	// List all models (lightweight)
	// (GET /models)
	ListAllModels(c fiber.Ctx, params ListAllModelsParams) error
	// List external models
	// (GET /models/external)
	ListExternalModels(c fiber.Ctx, params ListExternalModelsParams) error
	// List external model bounds
	// (GET /models/external/bounds)
	ListExternalBounds(c fiber.Ctx) error
	// Get external model by ID
	// (GET /models/external/{id})
	GetExternalModel(c fiber.Ctx, id string) error
	// Get external model bounds by ID
	// (GET /models/external/{id}/bounds)
	GetExternalBounds(c fiber.Ctx, id string) error
	// List transformation models
	// (GET /models/transformations)
	ListTransformations(c fiber.Ctx, params ListTransformationsParams) error
	// List transformation coverage
	// (GET /models/transformations/coverage)
	ListTransformationCoverage(c fiber.Ctx, params ListTransformationCoverageParams) error
	// List scheduled transformation runs
	// (GET /models/transformations/runs)
	ListScheduledRuns(c fiber.Ctx, params ListScheduledRunsParams) error
	// Get transformation model by ID
	// (GET /models/transformations/{id})
	GetTransformation(c fiber.Ctx, id string) error
	// Get transformation coverage by ID
	// (GET /models/transformations/{id}/coverage)
	GetTransformationCoverage(c fiber.Ctx, id string) error
	// Get scheduled transformation run by ID
	// (GET /models/transformations/{id}/runs)
	GetScheduledRun(c fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetIntervalTypes operation middleware
func (siw *ServerInterfaceWrapper) GetIntervalTypes(c fiber.Ctx) error {

	return siw.Handler.GetIntervalTypes(c)
}

// ListAllModels operation middleware
func (siw *ServerInterfaceWrapper) ListAllModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", query, &params.Search)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter search: %w", err).Error())
	}

	return siw.Handler.ListAllModels(c, params)
}

// ListExternalModels operation middleware
func (siw *ServerInterfaceWrapper) ListExternalModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExternalModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListExternalModels(c, params)
}

// ListExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) ListExternalBounds(c fiber.Ctx) error {

	return siw.Handler.ListExternalBounds(c)
}

// GetExternalModel operation middleware
func (siw *ServerInterfaceWrapper) GetExternalModel(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalModel(c, id)
}

// GetExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) GetExternalBounds(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalBounds(c, id)
}

// ListTransformations operation middleware
func (siw *ServerInterfaceWrapper) ListTransformations(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	return siw.Handler.ListTransformations(c, params)
}

// ListTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) ListTransformationCoverage(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationCoverageParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListTransformationCoverage(c, params)
}

// ListScheduledRuns operation middleware
func (siw *ServerInterfaceWrapper) ListScheduledRuns(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListScheduledRunsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListScheduledRuns(c, params)
}

// GetTransformation operation middleware
func (siw *ServerInterfaceWrapper) GetTransformation(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformation(c, id)
}

// GetTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) GetTransformationCoverage(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformationCoverage(c, id)
}

// GetScheduledRun operation middleware
func (siw *ServerInterfaceWrapper) GetScheduledRun(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetScheduledRun(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/interval/types", wrapper.GetIntervalTypes)

	router.Get(options.BaseURL+"/models", wrapper.ListAllModels)

	router.Get(options.BaseURL+"/models/external", wrapper.ListExternalModels)

	router.Get(options.BaseURL+"/models/external/bounds", wrapper.ListExternalBounds)

	router.Get(options.BaseURL+"/models/external/:id", wrapper.GetExternalModel)

	router.Get(options.BaseURL+"/models/external/:id/bounds", wrapper.GetExternalBounds)

	router.Get(options.BaseURL+"/models/transformations", wrapper.ListTransformations)

	router.Get(options.BaseURL+"/models/transformations/coverage", wrapper.ListTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/runs", wrapper.ListScheduledRuns)

	router.Get(options.BaseURL+"/models/transformations/:id", wrapper.GetTransformation)

	router.Get(options.BaseURL+"/models/transformations/:id/coverage", wrapper.GetTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/:id/runs", wrapper.GetScheduledRun)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JFdmAqVIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
