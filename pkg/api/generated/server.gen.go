// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for DependencyDebugInfoCoverageStatus.
const (
	FullCoverage   DependencyDebugInfoCoverageStatus = "full_coverage"
	HasGaps        DependencyDebugInfoCoverageStatus = "has_gaps"
	NoData         DependencyDebugInfoCoverageStatus = "no_data"
	NotInitialized DependencyDebugInfoCoverageStatus = "not_initialized"
)

// Defines values for DependencyDebugInfoNodeType.
const (
	DependencyDebugInfoNodeTypeExternal       DependencyDebugInfoNodeType = "external"
	DependencyDebugInfoNodeTypeTransformation DependencyDebugInfoNodeType = "transformation"
)

// Defines values for DependencyDebugInfoType.
const (
	OrGroup  DependencyDebugInfoType = "or_group"
	Required DependencyDebugInfoType = "required"
)

// Defines values for IntervalTypeTransformationFormat.
const (
	Date     IntervalTypeTransformationFormat = "date"
	Datetime IntervalTypeTransformationFormat = "datetime"
	Duration IntervalTypeTransformationFormat = "duration"
	Relative IntervalTypeTransformationFormat = "relative"
	Time     IntervalTypeTransformationFormat = "time"
)

// Defines values for ModelSummaryType.
const (
	ModelSummaryTypeExternal       ModelSummaryType = "external"
	ModelSummaryTypeTransformation ModelSummaryType = "transformation"
)

// Defines values for TransformationModelContentType.
const (
	TransformationModelContentTypeExec TransformationModelContentType = "exec"
	TransformationModelContentTypeSql  TransformationModelContentType = "sql"
)

// Defines values for TransformationModelMetadataLastRunStatus.
const (
	TransformationModelMetadataLastRunStatusFailed  TransformationModelMetadataLastRunStatus = "failed"
	TransformationModelMetadataLastRunStatusPending TransformationModelMetadataLastRunStatus = "pending"
	TransformationModelMetadataLastRunStatusRunning TransformationModelMetadataLastRunStatus = "running"
	TransformationModelMetadataLastRunStatusSuccess TransformationModelMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelType.
const (
	TransformationModelTypeIncremental TransformationModelType = "incremental"
	TransformationModelTypeScheduled   TransformationModelType = "scheduled"
)

// Defines values for TransformationModelBaseContentType.
const (
	TransformationModelBaseContentTypeExec TransformationModelBaseContentType = "exec"
	TransformationModelBaseContentTypeSql  TransformationModelBaseContentType = "sql"
)

// Defines values for TransformationModelBaseMetadataLastRunStatus.
const (
	TransformationModelBaseMetadataLastRunStatusFailed  TransformationModelBaseMetadataLastRunStatus = "failed"
	TransformationModelBaseMetadataLastRunStatusPending TransformationModelBaseMetadataLastRunStatus = "pending"
	TransformationModelBaseMetadataLastRunStatusRunning TransformationModelBaseMetadataLastRunStatus = "running"
	TransformationModelBaseMetadataLastRunStatusSuccess TransformationModelBaseMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelBaseType.
const (
	TransformationModelBaseTypeIncremental TransformationModelBaseType = "incremental"
	TransformationModelBaseTypeScheduled   TransformationModelBaseType = "scheduled"
)

// Defines values for ListAllModelsParamsType.
const (
	External       ListAllModelsParamsType = "external"
	Transformation ListAllModelsParamsType = "transformation"
)

// Defines values for ListTransformationsParamsType.
const (
	Incremental ListTransformationsParamsType = "incremental"
	Scheduled   ListTransformationsParamsType = "scheduled"
)

// Defines values for ListTransformationsParamsStatus.
const (
	Failed  ListTransformationsParamsStatus = "failed"
	Pending ListTransformationsParamsStatus = "pending"
	Running ListTransformationsParamsStatus = "running"
	Success ListTransformationsParamsStatus = "success"
)

// BoundsInfo Position bounds for a model
type BoundsInfo struct {
	// HasData Whether the model has any data
	HasData bool `json:"has_data"`

	// LagApplied Lag applied to external model (if applicable)
	LagApplied *int `json:"lag_applied,omitempty"`

	// Max Maximum available position (for external) or last processed end (for transformation)
	Max int `json:"max"`

	// Min Minimum available position
	Min int `json:"min"`
}

// CoverageDebug Comprehensive debug information for coverage and dependencies at a specific position
type CoverageDebug struct {
	// CanProcess Whether this position can be processed
	CanProcess bool `json:"can_process"`

	// Dependencies Recursive dependency analysis
	Dependencies []DependencyDebugInfo `json:"dependencies"`

	// EndPosition End position (position + interval)
	EndPosition *int `json:"end_position,omitempty"`

	// Interval Interval size checked
	Interval int `json:"interval"`

	// ModelCoverage Coverage information for the target model itself
	ModelCoverage ModelCoverageInfo `json:"model_coverage"`

	// ModelId The model being debugged
	ModelId string `json:"model_id"`

	// Position Position being checked
	Position int `json:"position"`

	// Validation Validation results using the same logic as backfill/dependency checking
	Validation ValidationDebugInfo `json:"validation"`
}

// CoverageDetail defines model for CoverageDetail.
type CoverageDetail struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges All processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// CoverageSummary defines model for CoverageSummary.
type CoverageSummary struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges Processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// DependencyDebugInfo Debug information for a single dependency
type DependencyDebugInfo struct {
	// Blocking Whether this dependency is blocking processing
	Blocking *bool `json:"blocking,omitempty"`

	// Bounds Position bounds for a model
	Bounds BoundsInfo `json:"bounds"`

	// ChildDependencies Recursive dependencies of this dependency
	ChildDependencies *[]DependencyDebugInfo `json:"child_dependencies,omitempty"`

	// CoverageStatus Coverage status for the requested position
	CoverageStatus *DependencyDebugInfoCoverageStatus `json:"coverage_status,omitempty"`

	// Gaps Gaps found in this dependency for the requested range
	Gaps *[]GapInfo `json:"gaps,omitempty"`

	// Id Dependency model ID
	Id string `json:"id"`

	// IsIncremental Whether this is an incremental transformation (can have gaps)
	IsIncremental *bool `json:"is_incremental,omitempty"`

	// NodeType Type of dependency model
	NodeType DependencyDebugInfoNodeType `json:"node_type"`

	// OrGroupMembers For OR groups, debug info for each member
	OrGroupMembers *[]DependencyDebugInfo `json:"or_group_members,omitempty"`

	// Type Dependency type (AND or OR group)
	Type DependencyDebugInfoType `json:"type"`
}

// DependencyDebugInfoCoverageStatus Coverage status for the requested position
type DependencyDebugInfoCoverageStatus string

// DependencyDebugInfoNodeType Type of dependency model
type DependencyDebugInfoNodeType string

// DependencyDebugInfoType Dependency type (AND or OR group)
type DependencyDebugInfoType string

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Error Human-readable error message
	Error string `json:"error"`
}

// ExternalBounds defines model for ExternalBounds.
type ExternalBounds struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// InitialScanComplete Whether initial scan is complete
	InitialScanComplete *bool `json:"initial_scan_complete,omitempty"`

	// InitialScanStarted Timestamp when initial scan started
	InitialScanStarted *time.Time `json:"initial_scan_started,omitempty"`

	// LastFullScan Timestamp of last full scan
	LastFullScan *time.Time `json:"last_full_scan,omitempty"`

	// LastIncrementalScan Timestamp of last incremental scan
	LastIncrementalScan *time.Time `json:"last_incremental_scan,omitempty"`

	// Max Maximum position in external source
	Max int `json:"max"`

	// Min Minimum position in external source
	Min int `json:"min"`

	// PreviousMax Previous maximum position (for tracking changes)
	PreviousMax *int `json:"previous_max,omitempty"`

	// PreviousMin Previous minimum position (for tracking changes)
	PreviousMin *int `json:"previous_min,omitempty"`
}

// ExternalModel defines model for ExternalModel.
type ExternalModel struct {
	// Cache Cache configuration for external source
	Cache *struct {
		// FullScanInterval Interval for full cache refresh
		FullScanInterval *string `json:"full_scan_interval,omitempty"`

		// IncrementalScanInterval Interval for incremental cache updates
		IncrementalScanInterval *string `json:"incremental_scan_interval,omitempty"`
	} `json:"cache,omitempty"`
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration for external source
	Interval *struct {
		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Lag Number of blocks/slots to lag behind head
	Lag *int `json:"lag,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt    *time.Time `json:"created_at,omitempty"`
		LastSyncedAt *time.Time `json:"last_synced_at,omitempty"`

		// RowCount Approximate row count in destination table
		RowCount *int `json:"row_count,omitempty"`

		// SizeBytes Approximate table size in bytes
		SizeBytes *int       `json:"size_bytes,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`
}

// GapInfo Information about a gap in coverage
type GapInfo struct {
	// End Gap end position
	End int `json:"end"`

	// OverlapsRequest Whether this gap overlaps with the requested position range
	OverlapsRequest *bool `json:"overlaps_request,omitempty"`

	// Size Gap size in interval units
	Size int `json:"size"`

	// Start Gap start position
	Start int `json:"start"`
}

// IntervalTypeTransformation A single transformation step for an interval type
type IntervalTypeTransformation struct {
	// Expression Optional CEL (Common Expression Language) expression to transform the value.
	// Uses 'value' as the input variable.
	// Supports math functions via math.* namespace (e.g., math.floor, math.ceil, math.round).
	// If omitted, value is passed through unchanged (identity transformation).
	Expression *string `json:"expression,omitempty"`

	// Format Optional display format hint for the frontend.
	// - datetime: Format as full date and time (e.g., "2024-01-15 14:30:00")
	// - date: Format as date only (e.g., "2024-01-15")
	// - time: Format as time only (e.g., "14:30:00")
	// - duration: Format as human-readable duration (e.g., "2h 30m")
	// - relative: Format as relative time (e.g., "2 hours ago")
	// If omitted, value is displayed as a raw number.
	Format *IntervalTypeTransformationFormat `json:"format,omitempty"`

	// Name Display name for this transformation
	Name string `json:"name"`
}

// IntervalTypeTransformationFormat Optional display format hint for the frontend.
// - datetime: Format as full date and time (e.g., "2024-01-15 14:30:00")
// - date: Format as date only (e.g., "2024-01-15")
// - time: Format as time only (e.g., "14:30:00")
// - duration: Format as human-readable duration (e.g., "2h 30m")
// - relative: Format as relative time (e.g., "2 hours ago")
// If omitted, value is displayed as a raw number.
type IntervalTypeTransformationFormat string

// ModelCoverageInfo Coverage information for the target model itself
type ModelCoverageInfo struct {
	// FirstPosition First processed position
	FirstPosition int `json:"first_position"`

	// GapsInWindow Gaps detected in the requested position window
	GapsInWindow *[]GapInfo `json:"gaps_in_window,omitempty"`

	// HasData Whether model has any processed data
	HasData bool `json:"has_data"`

	// LastEndPosition Last processed end position (max(position + interval))
	LastEndPosition int `json:"last_end_position"`

	// RangesInWindow Processed ranges overlapping the requested position window
	RangesInWindow *[]Range `json:"ranges_in_window,omitempty"`
}

// ModelSummary Lightweight model representation for listings
type ModelSummary struct {
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id    string `json:"id"`
	Table string `json:"table"`

	// Type Model type
	Type ModelSummaryType `json:"type"`
}

// ModelSummaryType Model type
type ModelSummaryType string

// Range defines model for Range.
type Range struct {
	// Interval Size of processed range
	Interval int `json:"interval"`

	// Position Starting position of processed range
	Position int `json:"position"`
}

// ScheduledRun defines model for ScheduledRun.
type ScheduledRun struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// LastRun Timestamp of last execution
	LastRun *time.Time `json:"last_run,omitempty"`
}

// TransformationModel defines model for TransformationModel.
type TransformationModel struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelContentType `json:"content_type"`
	Database    string                         `json:"database"`

	// DependsOn Upstream model dependencies preserving AND/OR semantics.
	// - String elements represent required dependencies (AND logic)
	// - Array elements represent OR groups (at least one required)
	DependsOn   *[]TransformationModel_DependsOn_Item `json:"depends_on,omitempty"`
	Description *string                               `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration (present when type=incremental)
	Interval *struct {
		// Max Maximum interval size
		Max *int `json:"max,omitempty"`

		// Min Minimum interval size
		Min *int `json:"min,omitempty"`

		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Limits Limits (present when type=incremental)
	Limits *struct {
		// Max Maximum position limit
		Max *int `json:"max,omitempty"`

		// Min Minimum position limit
		Min *int `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                      `json:"row_count,omitempty"`
		SizeBytes     *int                                      `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`

	// Schedule Cron expression (present when type=scheduled)
	Schedule *string `json:"schedule,omitempty"`

	// Schedules Schedules (present when type=incremental)
	Schedules *struct {
		// Backfill Backfill schedule
		Backfill *string `json:"backfill,omitempty"`

		// Forwardfill Forward fill schedule
		Forwardfill *string `json:"forwardfill,omitempty"`
	} `json:"schedules,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelType `json:"type"`
}

// TransformationModelContentType Execution method (SQL query or shell command)
type TransformationModelContentType string

// TransformationModelDependsOn0 Single required dependency (AND logic)
type TransformationModelDependsOn0 = string

// TransformationModelDependsOn1 OR group - at least one dependency required
type TransformationModelDependsOn1 = []string

// TransformationModel_DependsOn_Item defines model for TransformationModel.depends_on.Item.
type TransformationModel_DependsOn_Item struct {
	union json.RawMessage
}

// TransformationModelMetadataLastRunStatus defines model for TransformationModel.Metadata.LastRunStatus.
type TransformationModelMetadataLastRunStatus string

// TransformationModelType Transformation type (scheduled or incremental)
type TransformationModelType string

// TransformationModelBase defines model for TransformationModelBase.
type TransformationModelBase struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelBaseContentType `json:"content_type"`
	Database    string                             `json:"database"`

	// DependsOn Upstream model dependencies preserving AND/OR semantics.
	// - String elements represent required dependencies (AND logic)
	// - Array elements represent OR groups (at least one required)
	DependsOn   *[]TransformationModelBase_DependsOn_Item `json:"depends_on,omitempty"`
	Description *string                                   `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                    `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                    `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelBaseMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                          `json:"row_count,omitempty"`
		SizeBytes     *int                                          `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                    `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelBaseType `json:"type"`
}

// TransformationModelBaseContentType Execution method (SQL query or shell command)
type TransformationModelBaseContentType string

// TransformationModelBaseDependsOn0 Single required dependency (AND logic)
type TransformationModelBaseDependsOn0 = string

// TransformationModelBaseDependsOn1 OR group - at least one dependency required
type TransformationModelBaseDependsOn1 = []string

// TransformationModelBase_DependsOn_Item defines model for TransformationModelBase.depends_on.Item.
type TransformationModelBase_DependsOn_Item struct {
	union json.RawMessage
}

// TransformationModelBaseMetadataLastRunStatus defines model for TransformationModelBase.Metadata.LastRunStatus.
type TransformationModelBaseMetadataLastRunStatus string

// TransformationModelBaseType Transformation type (scheduled or incremental)
type TransformationModelBaseType string

// ValidationDebugInfo Validation results using the same logic as backfill/dependency checking
type ValidationDebugInfo struct {
	// BlockingGaps List of gaps blocking processing
	BlockingGaps *[]struct {
		DependencyId string `json:"dependency_id"`

		// Gap Information about a gap in coverage
		Gap GapInfo `json:"gap"`
	} `json:"blocking_gaps,omitempty"`

	// HasDependencyGaps Whether any dependencies have gaps in the requested range
	HasDependencyGaps bool `json:"has_dependency_gaps"`

	// InBounds Whether position is within valid bounds of all dependencies
	InBounds bool `json:"in_bounds"`

	// NextValidPosition Next position where dependencies are available (if blocked)
	NextValidPosition *int `json:"next_valid_position,omitempty"`

	// Reasons Human-readable reasons why position cannot be processed
	Reasons *[]string `json:"reasons,omitempty"`

	// ValidRange Valid position range calculated from dependencies
	ValidRange *struct {
		Max int `json:"max"`
		Min int `json:"min"`
	} `json:"valid_range,omitempty"`
}

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ListAllModelsParams defines parameters for ListAllModels.
type ListAllModelsParams struct {
	// Type Filter by model type
	Type *ListAllModelsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Search Search by model ID or description (case-insensitive)
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListAllModelsParamsType defines parameters for ListAllModels.
type ListAllModelsParamsType string

// ListExternalModelsParams defines parameters for ListExternalModels.
type ListExternalModelsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListTransformationsParams defines parameters for ListTransformations.
type ListTransformationsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Type Filter by transformation type
	Type *ListTransformationsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by last run status
	Status *ListTransformationsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ListTransformationsParamsType defines parameters for ListTransformations.
type ListTransformationsParamsType string

// ListTransformationsParamsStatus defines parameters for ListTransformations.
type ListTransformationsParamsStatus string

// ListTransformationCoverageParams defines parameters for ListTransformationCoverage.
type ListTransformationCoverageParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListScheduledRunsParams defines parameters for ListScheduledRuns.
type ListScheduledRunsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// AsTransformationModelDependsOn0 returns the union data inside the TransformationModel_DependsOn_Item as a TransformationModelDependsOn0
func (t TransformationModel_DependsOn_Item) AsTransformationModelDependsOn0() (TransformationModelDependsOn0, error) {
	var body TransformationModelDependsOn0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelDependsOn0 overwrites any union data inside the TransformationModel_DependsOn_Item as the provided TransformationModelDependsOn0
func (t *TransformationModel_DependsOn_Item) FromTransformationModelDependsOn0(v TransformationModelDependsOn0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelDependsOn0 performs a merge with any union data inside the TransformationModel_DependsOn_Item, using the provided TransformationModelDependsOn0
func (t *TransformationModel_DependsOn_Item) MergeTransformationModelDependsOn0(v TransformationModelDependsOn0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTransformationModelDependsOn1 returns the union data inside the TransformationModel_DependsOn_Item as a TransformationModelDependsOn1
func (t TransformationModel_DependsOn_Item) AsTransformationModelDependsOn1() (TransformationModelDependsOn1, error) {
	var body TransformationModelDependsOn1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelDependsOn1 overwrites any union data inside the TransformationModel_DependsOn_Item as the provided TransformationModelDependsOn1
func (t *TransformationModel_DependsOn_Item) FromTransformationModelDependsOn1(v TransformationModelDependsOn1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelDependsOn1 performs a merge with any union data inside the TransformationModel_DependsOn_Item, using the provided TransformationModelDependsOn1
func (t *TransformationModel_DependsOn_Item) MergeTransformationModelDependsOn1(v TransformationModelDependsOn1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransformationModel_DependsOn_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransformationModel_DependsOn_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTransformationModelBaseDependsOn0 returns the union data inside the TransformationModelBase_DependsOn_Item as a TransformationModelBaseDependsOn0
func (t TransformationModelBase_DependsOn_Item) AsTransformationModelBaseDependsOn0() (TransformationModelBaseDependsOn0, error) {
	var body TransformationModelBaseDependsOn0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelBaseDependsOn0 overwrites any union data inside the TransformationModelBase_DependsOn_Item as the provided TransformationModelBaseDependsOn0
func (t *TransformationModelBase_DependsOn_Item) FromTransformationModelBaseDependsOn0(v TransformationModelBaseDependsOn0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelBaseDependsOn0 performs a merge with any union data inside the TransformationModelBase_DependsOn_Item, using the provided TransformationModelBaseDependsOn0
func (t *TransformationModelBase_DependsOn_Item) MergeTransformationModelBaseDependsOn0(v TransformationModelBaseDependsOn0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTransformationModelBaseDependsOn1 returns the union data inside the TransformationModelBase_DependsOn_Item as a TransformationModelBaseDependsOn1
func (t TransformationModelBase_DependsOn_Item) AsTransformationModelBaseDependsOn1() (TransformationModelBaseDependsOn1, error) {
	var body TransformationModelBaseDependsOn1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransformationModelBaseDependsOn1 overwrites any union data inside the TransformationModelBase_DependsOn_Item as the provided TransformationModelBaseDependsOn1
func (t *TransformationModelBase_DependsOn_Item) FromTransformationModelBaseDependsOn1(v TransformationModelBaseDependsOn1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransformationModelBaseDependsOn1 performs a merge with any union data inside the TransformationModelBase_DependsOn_Item, using the provided TransformationModelBaseDependsOn1
func (t *TransformationModelBase_DependsOn_Item) MergeTransformationModelBaseDependsOn1(v TransformationModelBaseDependsOn1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TransformationModelBase_DependsOn_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TransformationModelBase_DependsOn_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get interval type transformations
	// (GET /interval/types)
	GetIntervalTypes(c fiber.Ctx) error
	// List all models (lightweight)
	// (GET /models)
	ListAllModels(c fiber.Ctx, params ListAllModelsParams) error
	// List external models
	// (GET /models/external)
	ListExternalModels(c fiber.Ctx, params ListExternalModelsParams) error
	// List external model bounds
	// (GET /models/external/bounds)
	ListExternalBounds(c fiber.Ctx) error
	// Get external model by ID
	// (GET /models/external/{id})
	GetExternalModel(c fiber.Ctx, id string) error
	// Get external model bounds by ID
	// (GET /models/external/{id}/bounds)
	GetExternalBounds(c fiber.Ctx, id string) error
	// List transformation models
	// (GET /models/transformations)
	ListTransformations(c fiber.Ctx, params ListTransformationsParams) error
	// List transformation coverage
	// (GET /models/transformations/coverage)
	ListTransformationCoverage(c fiber.Ctx, params ListTransformationCoverageParams) error
	// List scheduled transformation runs
	// (GET /models/transformations/runs)
	ListScheduledRuns(c fiber.Ctx, params ListScheduledRunsParams) error
	// Get transformation model by ID
	// (GET /models/transformations/{id})
	GetTransformation(c fiber.Ctx, id string) error
	// Get transformation coverage by ID
	// (GET /models/transformations/{id}/coverage)
	GetTransformationCoverage(c fiber.Ctx, id string) error
	// Debug coverage and dependency status for a specific position
	// (GET /models/transformations/{id}/coverage/{position})
	DebugCoverageAtPosition(c fiber.Ctx, id string, position int) error
	// Get scheduled transformation run by ID
	// (GET /models/transformations/{id}/runs)
	GetScheduledRun(c fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetIntervalTypes operation middleware
func (siw *ServerInterfaceWrapper) GetIntervalTypes(c fiber.Ctx) error {

	return siw.Handler.GetIntervalTypes(c)
}

// ListAllModels operation middleware
func (siw *ServerInterfaceWrapper) ListAllModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", query, &params.Search)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter search: %w", err).Error())
	}

	return siw.Handler.ListAllModels(c, params)
}

// ListExternalModels operation middleware
func (siw *ServerInterfaceWrapper) ListExternalModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExternalModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListExternalModels(c, params)
}

// ListExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) ListExternalBounds(c fiber.Ctx) error {

	return siw.Handler.ListExternalBounds(c)
}

// GetExternalModel operation middleware
func (siw *ServerInterfaceWrapper) GetExternalModel(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalModel(c, id)
}

// GetExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) GetExternalBounds(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalBounds(c, id)
}

// ListTransformations operation middleware
func (siw *ServerInterfaceWrapper) ListTransformations(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	return siw.Handler.ListTransformations(c, params)
}

// ListTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) ListTransformationCoverage(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationCoverageParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListTransformationCoverage(c, params)
}

// ListScheduledRuns operation middleware
func (siw *ServerInterfaceWrapper) ListScheduledRuns(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListScheduledRunsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListScheduledRuns(c, params)
}

// GetTransformation operation middleware
func (siw *ServerInterfaceWrapper) GetTransformation(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformation(c, id)
}

// GetTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) GetTransformationCoverage(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformationCoverage(c, id)
}

// DebugCoverageAtPosition operation middleware
func (siw *ServerInterfaceWrapper) DebugCoverageAtPosition(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	// ------------- Path parameter "position" -------------
	var position int

	err = runtime.BindStyledParameterWithOptions("simple", "position", c.Params("position"), &position, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter position: %w", err).Error())
	}

	return siw.Handler.DebugCoverageAtPosition(c, id, position)
}

// GetScheduledRun operation middleware
func (siw *ServerInterfaceWrapper) GetScheduledRun(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetScheduledRun(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/interval/types", wrapper.GetIntervalTypes)

	router.Get(options.BaseURL+"/models", wrapper.ListAllModels)

	router.Get(options.BaseURL+"/models/external", wrapper.ListExternalModels)

	router.Get(options.BaseURL+"/models/external/bounds", wrapper.ListExternalBounds)

	router.Get(options.BaseURL+"/models/external/:id", wrapper.GetExternalModel)

	router.Get(options.BaseURL+"/models/external/:id/bounds", wrapper.GetExternalBounds)

	router.Get(options.BaseURL+"/models/transformations", wrapper.ListTransformations)

	router.Get(options.BaseURL+"/models/transformations/coverage", wrapper.ListTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/runs", wrapper.ListScheduledRuns)

	router.Get(options.BaseURL+"/models/transformations/:id", wrapper.GetTransformation)

	router.Get(options.BaseURL+"/models/transformations/:id/coverage", wrapper.GetTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/:id/coverage/:position", wrapper.DebugCoverageAtPosition)

	router.Get(options.BaseURL+"/models/transformations/:id/runs", wrapper.GetScheduledRun)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
