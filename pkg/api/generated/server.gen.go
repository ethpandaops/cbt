// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for IntervalTypeTransformationFormat.
const (
	Date     IntervalTypeTransformationFormat = "date"
	Datetime IntervalTypeTransformationFormat = "datetime"
	Duration IntervalTypeTransformationFormat = "duration"
	Relative IntervalTypeTransformationFormat = "relative"
	Time     IntervalTypeTransformationFormat = "time"
)

// Defines values for ModelSummaryType.
const (
	ModelSummaryTypeExternal       ModelSummaryType = "external"
	ModelSummaryTypeTransformation ModelSummaryType = "transformation"
)

// Defines values for TransformationModelContentType.
const (
	TransformationModelContentTypeExec TransformationModelContentType = "exec"
	TransformationModelContentTypeSql  TransformationModelContentType = "sql"
)

// Defines values for TransformationModelMetadataLastRunStatus.
const (
	TransformationModelMetadataLastRunStatusFailed  TransformationModelMetadataLastRunStatus = "failed"
	TransformationModelMetadataLastRunStatusPending TransformationModelMetadataLastRunStatus = "pending"
	TransformationModelMetadataLastRunStatusRunning TransformationModelMetadataLastRunStatus = "running"
	TransformationModelMetadataLastRunStatusSuccess TransformationModelMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelType.
const (
	TransformationModelTypeIncremental TransformationModelType = "incremental"
	TransformationModelTypeScheduled   TransformationModelType = "scheduled"
)

// Defines values for TransformationModelBaseContentType.
const (
	TransformationModelBaseContentTypeExec TransformationModelBaseContentType = "exec"
	TransformationModelBaseContentTypeSql  TransformationModelBaseContentType = "sql"
)

// Defines values for TransformationModelBaseMetadataLastRunStatus.
const (
	TransformationModelBaseMetadataLastRunStatusFailed  TransformationModelBaseMetadataLastRunStatus = "failed"
	TransformationModelBaseMetadataLastRunStatusPending TransformationModelBaseMetadataLastRunStatus = "pending"
	TransformationModelBaseMetadataLastRunStatusRunning TransformationModelBaseMetadataLastRunStatus = "running"
	TransformationModelBaseMetadataLastRunStatusSuccess TransformationModelBaseMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelBaseType.
const (
	TransformationModelBaseTypeIncremental TransformationModelBaseType = "incremental"
	TransformationModelBaseTypeScheduled   TransformationModelBaseType = "scheduled"
)

// Defines values for ListAllModelsParamsType.
const (
	ListAllModelsParamsTypeExternal       ListAllModelsParamsType = "external"
	ListAllModelsParamsTypeTransformation ListAllModelsParamsType = "transformation"
)

// Defines values for ListTransformationsParamsType.
const (
	Incremental ListTransformationsParamsType = "incremental"
	Scheduled   ListTransformationsParamsType = "scheduled"
)

// Defines values for ListTransformationsParamsStatus.
const (
	Failed  ListTransformationsParamsStatus = "failed"
	Pending ListTransformationsParamsStatus = "pending"
	Running ListTransformationsParamsStatus = "running"
	Success ListTransformationsParamsStatus = "success"
)

// CoverageDetail defines model for CoverageDetail.
type CoverageDetail struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges All processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// CoverageSummary defines model for CoverageSummary.
type CoverageSummary struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges Processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Error Human-readable error message
	Error string `json:"error"`
}

// ExternalBounds defines model for ExternalBounds.
type ExternalBounds struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// InitialScanComplete Whether initial scan is complete
	InitialScanComplete *bool `json:"initial_scan_complete,omitempty"`

	// InitialScanStarted Timestamp when initial scan started
	InitialScanStarted *time.Time `json:"initial_scan_started,omitempty"`

	// LastFullScan Timestamp of last full scan
	LastFullScan *time.Time `json:"last_full_scan,omitempty"`

	// LastIncrementalScan Timestamp of last incremental scan
	LastIncrementalScan *time.Time `json:"last_incremental_scan,omitempty"`

	// Max Maximum position in external source
	Max int `json:"max"`

	// Min Minimum position in external source
	Min int `json:"min"`

	// PreviousMax Previous maximum position (for tracking changes)
	PreviousMax *int `json:"previous_max,omitempty"`

	// PreviousMin Previous minimum position (for tracking changes)
	PreviousMin *int `json:"previous_min,omitempty"`
}

// ExternalModel defines model for ExternalModel.
type ExternalModel struct {
	// Cache Cache configuration for external source
	Cache *struct {
		// FullScanInterval Interval for full cache refresh
		FullScanInterval *string `json:"full_scan_interval,omitempty"`

		// IncrementalScanInterval Interval for incremental cache updates
		IncrementalScanInterval *string `json:"incremental_scan_interval,omitempty"`
	} `json:"cache,omitempty"`
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration for external source
	Interval *struct {
		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Lag Number of blocks/slots to lag behind head
	Lag *int `json:"lag,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt    *time.Time `json:"created_at,omitempty"`
		LastSyncedAt *time.Time `json:"last_synced_at,omitempty"`

		// RowCount Approximate row count in destination table
		RowCount *int `json:"row_count,omitempty"`

		// SizeBytes Approximate table size in bytes
		SizeBytes *int       `json:"size_bytes,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`
}

// IntervalTypeTransformation A single transformation step for an interval type
type IntervalTypeTransformation struct {
	// Expression Optional CEL (Common Expression Language) expression to transform the value.
	// Uses 'value' as the input variable.
	// Supports math functions via math.* namespace (e.g., math.floor, math.ceil, math.round).
	// If omitted, value is passed through unchanged (identity transformation).
	Expression *string `json:"expression,omitempty"`

	// Format Optional display format hint for the frontend.
	// - datetime: Format as full date and time (e.g., "2024-01-15 14:30:00")
	// - date: Format as date only (e.g., "2024-01-15")
	// - time: Format as time only (e.g., "14:30:00")
	// - duration: Format as human-readable duration (e.g., "2h 30m")
	// - relative: Format as relative time (e.g., "2 hours ago")
	// If omitted, value is displayed as a raw number.
	Format *IntervalTypeTransformationFormat `json:"format,omitempty"`

	// Name Display name for this transformation
	Name string `json:"name"`
}

// IntervalTypeTransformationFormat Optional display format hint for the frontend.
// - datetime: Format as full date and time (e.g., "2024-01-15 14:30:00")
// - date: Format as date only (e.g., "2024-01-15")
// - time: Format as time only (e.g., "14:30:00")
// - duration: Format as human-readable duration (e.g., "2h 30m")
// - relative: Format as relative time (e.g., "2 hours ago")
// If omitted, value is displayed as a raw number.
type IntervalTypeTransformationFormat string

// ModelSummary Lightweight model representation for listings
type ModelSummary struct {
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id    string `json:"id"`
	Table string `json:"table"`

	// Type Model type
	Type ModelSummaryType `json:"type"`
}

// ModelSummaryType Model type
type ModelSummaryType string

// Range defines model for Range.
type Range struct {
	// Interval Size of processed range
	Interval int `json:"interval"`

	// Position Starting position of processed range
	Position int `json:"position"`
}

// ScheduledRun defines model for ScheduledRun.
type ScheduledRun struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// LastRun Timestamp of last execution
	LastRun *time.Time `json:"last_run,omitempty"`
}

// TransformationModel defines model for TransformationModel.
type TransformationModel struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelContentType `json:"content_type"`
	Database    string                         `json:"database"`

	// DependsOn Upstream model dependencies
	DependsOn   *[]string `json:"depends_on,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration (present when type=incremental)
	Interval *struct {
		// Max Maximum interval size
		Max *int `json:"max,omitempty"`

		// Min Minimum interval size
		Min *int `json:"min,omitempty"`

		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Limits Limits (present when type=incremental)
	Limits *struct {
		// Max Maximum position limit
		Max *int `json:"max,omitempty"`

		// Min Minimum position limit
		Min *int `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                      `json:"row_count,omitempty"`
		SizeBytes     *int                                      `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`

	// Schedule Cron expression (present when type=scheduled)
	Schedule *string `json:"schedule,omitempty"`

	// Schedules Schedules (present when type=incremental)
	Schedules *struct {
		// Backfill Backfill schedule
		Backfill *string `json:"backfill,omitempty"`

		// Forwardfill Forward fill schedule
		Forwardfill *string `json:"forwardfill,omitempty"`
	} `json:"schedules,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelType `json:"type"`
}

// TransformationModelContentType Execution method (SQL query or shell command)
type TransformationModelContentType string

// TransformationModelMetadataLastRunStatus defines model for TransformationModel.Metadata.LastRunStatus.
type TransformationModelMetadataLastRunStatus string

// TransformationModelType Transformation type (scheduled or incremental)
type TransformationModelType string

// TransformationModelBase defines model for TransformationModelBase.
type TransformationModelBase struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelBaseContentType `json:"content_type"`
	Database    string                             `json:"database"`

	// DependsOn Upstream model dependencies
	DependsOn   *[]string `json:"depends_on,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                    `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                    `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelBaseMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                          `json:"row_count,omitempty"`
		SizeBytes     *int                                          `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                    `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelBaseType `json:"type"`
}

// TransformationModelBaseContentType Execution method (SQL query or shell command)
type TransformationModelBaseContentType string

// TransformationModelBaseMetadataLastRunStatus defines model for TransformationModelBase.Metadata.LastRunStatus.
type TransformationModelBaseMetadataLastRunStatus string

// TransformationModelBaseType Transformation type (scheduled or incremental)
type TransformationModelBaseType string

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ListAllModelsParams defines parameters for ListAllModels.
type ListAllModelsParams struct {
	// Type Filter by model type
	Type *ListAllModelsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Search Search by model ID or description (case-insensitive)
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListAllModelsParamsType defines parameters for ListAllModels.
type ListAllModelsParamsType string

// ListExternalModelsParams defines parameters for ListExternalModels.
type ListExternalModelsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListTransformationsParams defines parameters for ListTransformations.
type ListTransformationsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Type Filter by transformation type
	Type *ListTransformationsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by last run status
	Status *ListTransformationsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ListTransformationsParamsType defines parameters for ListTransformations.
type ListTransformationsParamsType string

// ListTransformationsParamsStatus defines parameters for ListTransformations.
type ListTransformationsParamsStatus string

// ListTransformationCoverageParams defines parameters for ListTransformationCoverage.
type ListTransformationCoverageParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListScheduledRunsParams defines parameters for ListScheduledRuns.
type ListScheduledRunsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get interval type transformations
	// (GET /interval/types)
	GetIntervalTypes(c fiber.Ctx) error
	// List all models (lightweight)
	// (GET /models)
	ListAllModels(c fiber.Ctx, params ListAllModelsParams) error
	// List external models
	// (GET /models/external)
	ListExternalModels(c fiber.Ctx, params ListExternalModelsParams) error
	// List external model bounds
	// (GET /models/external/bounds)
	ListExternalBounds(c fiber.Ctx) error
	// Get external model by ID
	// (GET /models/external/{id})
	GetExternalModel(c fiber.Ctx, id string) error
	// Get external model bounds by ID
	// (GET /models/external/{id}/bounds)
	GetExternalBounds(c fiber.Ctx, id string) error
	// List transformation models
	// (GET /models/transformations)
	ListTransformations(c fiber.Ctx, params ListTransformationsParams) error
	// List transformation coverage
	// (GET /models/transformations/coverage)
	ListTransformationCoverage(c fiber.Ctx, params ListTransformationCoverageParams) error
	// List scheduled transformation runs
	// (GET /models/transformations/runs)
	ListScheduledRuns(c fiber.Ctx, params ListScheduledRunsParams) error
	// Get transformation model by ID
	// (GET /models/transformations/{id})
	GetTransformation(c fiber.Ctx, id string) error
	// Get transformation coverage by ID
	// (GET /models/transformations/{id}/coverage)
	GetTransformationCoverage(c fiber.Ctx, id string) error
	// Get scheduled transformation run by ID
	// (GET /models/transformations/{id}/runs)
	GetScheduledRun(c fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetIntervalTypes operation middleware
func (siw *ServerInterfaceWrapper) GetIntervalTypes(c fiber.Ctx) error {

	return siw.Handler.GetIntervalTypes(c)
}

// ListAllModels operation middleware
func (siw *ServerInterfaceWrapper) ListAllModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", query, &params.Search)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter search: %w", err).Error())
	}

	return siw.Handler.ListAllModels(c, params)
}

// ListExternalModels operation middleware
func (siw *ServerInterfaceWrapper) ListExternalModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExternalModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListExternalModels(c, params)
}

// ListExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) ListExternalBounds(c fiber.Ctx) error {

	return siw.Handler.ListExternalBounds(c)
}

// GetExternalModel operation middleware
func (siw *ServerInterfaceWrapper) GetExternalModel(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalModel(c, id)
}

// GetExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) GetExternalBounds(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalBounds(c, id)
}

// ListTransformations operation middleware
func (siw *ServerInterfaceWrapper) ListTransformations(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	return siw.Handler.ListTransformations(c, params)
}

// ListTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) ListTransformationCoverage(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationCoverageParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListTransformationCoverage(c, params)
}

// ListScheduledRuns operation middleware
func (siw *ServerInterfaceWrapper) ListScheduledRuns(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListScheduledRunsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListScheduledRuns(c, params)
}

// GetTransformation operation middleware
func (siw *ServerInterfaceWrapper) GetTransformation(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformation(c, id)
}

// GetTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) GetTransformationCoverage(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformationCoverage(c, id)
}

// GetScheduledRun operation middleware
func (siw *ServerInterfaceWrapper) GetScheduledRun(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetScheduledRun(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/interval/types", wrapper.GetIntervalTypes)

	router.Get(options.BaseURL+"/models", wrapper.ListAllModels)

	router.Get(options.BaseURL+"/models/external", wrapper.ListExternalModels)

	router.Get(options.BaseURL+"/models/external/bounds", wrapper.ListExternalBounds)

	router.Get(options.BaseURL+"/models/external/:id", wrapper.GetExternalModel)

	router.Get(options.BaseURL+"/models/external/:id/bounds", wrapper.GetExternalBounds)

	router.Get(options.BaseURL+"/models/transformations", wrapper.ListTransformations)

	router.Get(options.BaseURL+"/models/transformations/coverage", wrapper.ListTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/runs", wrapper.ListScheduledRuns)

	router.Get(options.BaseURL+"/models/transformations/:id", wrapper.GetTransformation)

	router.Get(options.BaseURL+"/models/transformations/:id/coverage", wrapper.GetTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/:id/runs", wrapper.GetScheduledRun)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ElCnQkcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
