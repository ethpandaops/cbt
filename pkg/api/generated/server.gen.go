// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ModelSummaryType.
const (
	ModelSummaryTypeExternal       ModelSummaryType = "external"
	ModelSummaryTypeTransformation ModelSummaryType = "transformation"
)

// Defines values for TransformationModelContentType.
const (
	TransformationModelContentTypeExec TransformationModelContentType = "exec"
	TransformationModelContentTypeSql  TransformationModelContentType = "sql"
)

// Defines values for TransformationModelMetadataLastRunStatus.
const (
	TransformationModelMetadataLastRunStatusFailed  TransformationModelMetadataLastRunStatus = "failed"
	TransformationModelMetadataLastRunStatusPending TransformationModelMetadataLastRunStatus = "pending"
	TransformationModelMetadataLastRunStatusRunning TransformationModelMetadataLastRunStatus = "running"
	TransformationModelMetadataLastRunStatusSuccess TransformationModelMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelType.
const (
	TransformationModelTypeIncremental TransformationModelType = "incremental"
	TransformationModelTypeScheduled   TransformationModelType = "scheduled"
)

// Defines values for TransformationModelBaseContentType.
const (
	TransformationModelBaseContentTypeExec TransformationModelBaseContentType = "exec"
	TransformationModelBaseContentTypeSql  TransformationModelBaseContentType = "sql"
)

// Defines values for TransformationModelBaseMetadataLastRunStatus.
const (
	TransformationModelBaseMetadataLastRunStatusFailed  TransformationModelBaseMetadataLastRunStatus = "failed"
	TransformationModelBaseMetadataLastRunStatusPending TransformationModelBaseMetadataLastRunStatus = "pending"
	TransformationModelBaseMetadataLastRunStatusRunning TransformationModelBaseMetadataLastRunStatus = "running"
	TransformationModelBaseMetadataLastRunStatusSuccess TransformationModelBaseMetadataLastRunStatus = "success"
)

// Defines values for TransformationModelBaseType.
const (
	TransformationModelBaseTypeIncremental TransformationModelBaseType = "incremental"
	TransformationModelBaseTypeScheduled   TransformationModelBaseType = "scheduled"
)

// Defines values for ListAllModelsParamsType.
const (
	ListAllModelsParamsTypeExternal       ListAllModelsParamsType = "external"
	ListAllModelsParamsTypeTransformation ListAllModelsParamsType = "transformation"
)

// Defines values for ListTransformationsParamsType.
const (
	Incremental ListTransformationsParamsType = "incremental"
	Scheduled   ListTransformationsParamsType = "scheduled"
)

// Defines values for ListTransformationsParamsStatus.
const (
	Failed  ListTransformationsParamsStatus = "failed"
	Pending ListTransformationsParamsStatus = "pending"
	Running ListTransformationsParamsStatus = "running"
	Success ListTransformationsParamsStatus = "success"
)

// CoverageDetail defines model for CoverageDetail.
type CoverageDetail struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges All processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// CoverageSummary defines model for CoverageSummary.
type CoverageSummary struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// Ranges Processed ranges from admin_incremental table
	Ranges []Range `json:"ranges"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int `json:"code"`

	// Error Human-readable error message
	Error string `json:"error"`
}

// ExternalBounds defines model for ExternalBounds.
type ExternalBounds struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// InitialScanComplete Whether initial scan is complete
	InitialScanComplete *bool `json:"initial_scan_complete,omitempty"`

	// InitialScanStarted Timestamp when initial scan started
	InitialScanStarted *time.Time `json:"initial_scan_started,omitempty"`

	// LastFullScan Timestamp of last full scan
	LastFullScan *time.Time `json:"last_full_scan,omitempty"`

	// LastIncrementalScan Timestamp of last incremental scan
	LastIncrementalScan *time.Time `json:"last_incremental_scan,omitempty"`

	// Max Maximum position in external source
	Max int `json:"max"`

	// Min Minimum position in external source
	Min int `json:"min"`

	// PreviousMax Previous maximum position (for tracking changes)
	PreviousMax *int `json:"previous_max,omitempty"`

	// PreviousMin Previous minimum position (for tracking changes)
	PreviousMin *int `json:"previous_min,omitempty"`
}

// ExternalModel defines model for ExternalModel.
type ExternalModel struct {
	// Cache Cache configuration for external source
	Cache *struct {
		// FullScanInterval Interval for full cache refresh
		FullScanInterval *string `json:"full_scan_interval,omitempty"`

		// IncrementalScanInterval Interval for incremental cache updates
		IncrementalScanInterval *string `json:"incremental_scan_interval,omitempty"`
	} `json:"cache,omitempty"`
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration for external source
	Interval *struct {
		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Lag Number of blocks/slots to lag behind head
	Lag *int `json:"lag,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt    *time.Time `json:"created_at,omitempty"`
		LastSyncedAt *time.Time `json:"last_synced_at,omitempty"`

		// RowCount Approximate row count in destination table
		RowCount *int `json:"row_count,omitempty"`

		// SizeBytes Approximate table size in bytes
		SizeBytes *int       `json:"size_bytes,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`
}

// ModelSummary Lightweight model representation for listings
type ModelSummary struct {
	Database    string  `json:"database"`
	Description *string `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id    string `json:"id"`
	Table string `json:"table"`

	// Type Model type
	Type ModelSummaryType `json:"type"`
}

// ModelSummaryType Model type
type ModelSummaryType string

// Range defines model for Range.
type Range struct {
	// Interval Size of processed range
	Interval int `json:"interval"`

	// Position Starting position of processed range
	Position int `json:"position"`
}

// ScheduledRun defines model for ScheduledRun.
type ScheduledRun struct {
	// Id Fully qualified model ID (database.table)
	Id string `json:"id"`

	// LastRun Timestamp of last execution
	LastRun *time.Time `json:"last_run,omitempty"`
}

// TransformationModel defines model for TransformationModel.
type TransformationModel struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelContentType `json:"content_type"`
	Database    string                         `json:"database"`

	// DependsOn Upstream model dependencies
	DependsOn   *[]string `json:"depends_on,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Interval Interval configuration (present when type=incremental)
	Interval *struct {
		// Max Maximum interval size
		Max *int `json:"max,omitempty"`

		// Min Minimum interval size
		Min *int `json:"min,omitempty"`

		// Type Type of interval (e.g., "second", "slot", "epoch", "block")
		Type *string `json:"type,omitempty"`
	} `json:"interval,omitempty"`

	// Limits Limits (present when type=incremental)
	Limits *struct {
		// Max Maximum position limit
		Max *int `json:"max,omitempty"`

		// Min Minimum position limit
		Min *int `json:"min,omitempty"`
	} `json:"limits,omitempty"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                      `json:"row_count,omitempty"`
		SizeBytes     *int                                      `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`

	// Schedule Cron expression (present when type=scheduled)
	Schedule *string `json:"schedule,omitempty"`

	// Schedules Schedules (present when type=incremental)
	Schedules *struct {
		// Backfill Backfill schedule
		Backfill *string `json:"backfill,omitempty"`

		// Forwardfill Forward fill schedule
		Forwardfill *string `json:"forwardfill,omitempty"`
	} `json:"schedules,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelType `json:"type"`
}

// TransformationModelContentType Execution method (SQL query or shell command)
type TransformationModelContentType string

// TransformationModelMetadataLastRunStatus defines model for TransformationModel.Metadata.LastRunStatus.
type TransformationModelMetadataLastRunStatus string

// TransformationModelType Transformation type (scheduled or incremental)
type TransformationModelType string

// TransformationModelBase defines model for TransformationModelBase.
type TransformationModelBase struct {
	// Content SQL query or exec command defining the transformation
	Content string `json:"content"`

	// ContentType Execution method (SQL query or shell command)
	ContentType TransformationModelBaseContentType `json:"content_type"`
	Database    string                             `json:"database"`

	// DependsOn Upstream model dependencies
	DependsOn   *[]string `json:"depends_on,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id Fully qualified ID (database.table)
	Id string `json:"id"`

	// Metadata System-managed metadata
	Metadata *struct {
		CreatedAt     *time.Time                                    `json:"created_at,omitempty"`
		LastRunAt     *time.Time                                    `json:"last_run_at,omitempty"`
		LastRunStatus *TransformationModelBaseMetadataLastRunStatus `json:"last_run_status,omitempty"`
		RowCount      *int                                          `json:"row_count,omitempty"`
		SizeBytes     *int                                          `json:"size_bytes,omitempty"`
		UpdatedAt     *time.Time                                    `json:"updated_at,omitempty"`
	} `json:"metadata,omitempty"`
	Table string `json:"table"`

	// Tags Tags for categorization
	Tags *[]string `json:"tags,omitempty"`

	// Type Transformation type (scheduled or incremental)
	Type TransformationModelBaseType `json:"type"`
}

// TransformationModelBaseContentType Execution method (SQL query or shell command)
type TransformationModelBaseContentType string

// TransformationModelBaseMetadataLastRunStatus defines model for TransformationModelBase.Metadata.LastRunStatus.
type TransformationModelBaseMetadataLastRunStatus string

// TransformationModelBaseType Transformation type (scheduled or incremental)
type TransformationModelBaseType string

// InternalError defines model for InternalError.
type InternalError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ListAllModelsParams defines parameters for ListAllModels.
type ListAllModelsParams struct {
	// Type Filter by model type
	Type *ListAllModelsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Search Search by model ID or description (case-insensitive)
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListAllModelsParamsType defines parameters for ListAllModels.
type ListAllModelsParamsType string

// ListExternalModelsParams defines parameters for ListExternalModels.
type ListExternalModelsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListTransformationsParams defines parameters for ListTransformations.
type ListTransformationsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`

	// Type Filter by transformation type
	Type *ListTransformationsParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by last run status
	Status *ListTransformationsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ListTransformationsParamsType defines parameters for ListTransformations.
type ListTransformationsParamsType string

// ListTransformationsParamsStatus defines parameters for ListTransformations.
type ListTransformationsParamsStatus string

// ListTransformationCoverageParams defines parameters for ListTransformationCoverage.
type ListTransformationCoverageParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ListScheduledRunsParams defines parameters for ListScheduledRuns.
type ListScheduledRunsParams struct {
	// Database Filter by database name
	Database *string `form:"database,omitempty" json:"database,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all models (lightweight)
	// (GET /models)
	ListAllModels(c fiber.Ctx, params ListAllModelsParams) error
	// List external models
	// (GET /models/external)
	ListExternalModels(c fiber.Ctx, params ListExternalModelsParams) error
	// List external model bounds
	// (GET /models/external/bounds)
	ListExternalBounds(c fiber.Ctx) error
	// Get external model by ID
	// (GET /models/external/{id})
	GetExternalModel(c fiber.Ctx, id string) error
	// Get external model bounds by ID
	// (GET /models/external/{id}/bounds)
	GetExternalBounds(c fiber.Ctx, id string) error
	// List transformation models
	// (GET /models/transformations)
	ListTransformations(c fiber.Ctx, params ListTransformationsParams) error
	// List transformation coverage
	// (GET /models/transformations/coverage)
	ListTransformationCoverage(c fiber.Ctx, params ListTransformationCoverageParams) error
	// List scheduled transformation runs
	// (GET /models/transformations/runs)
	ListScheduledRuns(c fiber.Ctx, params ListScheduledRunsParams) error
	// Get transformation model by ID
	// (GET /models/transformations/{id})
	GetTransformation(c fiber.Ctx, id string) error
	// Get transformation coverage by ID
	// (GET /models/transformations/{id}/coverage)
	GetTransformationCoverage(c fiber.Ctx, id string) error
	// Get scheduled transformation run by ID
	// (GET /models/transformations/{id}/runs)
	GetScheduledRun(c fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListAllModels operation middleware
func (siw *ServerInterfaceWrapper) ListAllModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", query, &params.Search)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter search: %w", err).Error())
	}

	return siw.Handler.ListAllModels(c, params)
}

// ListExternalModels operation middleware
func (siw *ServerInterfaceWrapper) ListExternalModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListExternalModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListExternalModels(c, params)
}

// ListExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) ListExternalBounds(c fiber.Ctx) error {

	return siw.Handler.ListExternalBounds(c)
}

// GetExternalModel operation middleware
func (siw *ServerInterfaceWrapper) GetExternalModel(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalModel(c, id)
}

// GetExternalBounds operation middleware
func (siw *ServerInterfaceWrapper) GetExternalBounds(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetExternalBounds(c, id)
}

// ListTransformations operation middleware
func (siw *ServerInterfaceWrapper) ListTransformations(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", query, &params.Status)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter status: %w", err).Error())
	}

	return siw.Handler.ListTransformations(c, params)
}

// ListTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) ListTransformationCoverage(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransformationCoverageParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListTransformationCoverage(c, params)
}

// ListScheduledRuns operation middleware
func (siw *ServerInterfaceWrapper) ListScheduledRuns(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListScheduledRunsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.ListScheduledRuns(c, params)
}

// GetTransformation operation middleware
func (siw *ServerInterfaceWrapper) GetTransformation(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformation(c, id)
}

// GetTransformationCoverage operation middleware
func (siw *ServerInterfaceWrapper) GetTransformationCoverage(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTransformationCoverage(c, id)
}

// GetScheduledRun operation middleware
func (siw *ServerInterfaceWrapper) GetScheduledRun(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetScheduledRun(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/models", wrapper.ListAllModels)

	router.Get(options.BaseURL+"/models/external", wrapper.ListExternalModels)

	router.Get(options.BaseURL+"/models/external/bounds", wrapper.ListExternalBounds)

	router.Get(options.BaseURL+"/models/external/:id", wrapper.GetExternalModel)

	router.Get(options.BaseURL+"/models/external/:id/bounds", wrapper.GetExternalBounds)

	router.Get(options.BaseURL+"/models/transformations", wrapper.ListTransformations)

	router.Get(options.BaseURL+"/models/transformations/coverage", wrapper.ListTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/runs", wrapper.ListScheduledRuns)

	router.Get(options.BaseURL+"/models/transformations/:id", wrapper.GetTransformation)

	router.Get(options.BaseURL+"/models/transformations/:id/coverage", wrapper.GetTransformationCoverage)

	router.Get(options.BaseURL+"/models/transformations/:id/runs", wrapper.GetScheduledRun)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
