// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetModelsParamsType.
const (
	External       GetModelsParamsType = "external"
	Transformation GetModelsParamsType = "transformation"
)

// Error defines model for Error.
type Error struct {
	Code  int    `json:"code"`
	Error string `json:"error"`
}

// ModelDetail defines model for ModelDetail.
type ModelDetail struct {
	Config       map[string]interface{} `json:"config"`
	Database     string                 `json:"database"`
	Dependencies *[]string              `json:"dependencies,omitempty"`
	Dependents   *[]string              `json:"dependents,omitempty"`
	Id           string                 `json:"id"`
	Table        string                 `json:"table"`
	Type         string                 `json:"type"`
}

// ModelsResponse defines model for ModelsResponse.
type ModelsResponse struct {
	Models []ModelDetail `json:"models"`
	Total  int           `json:"total"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// GetModelsParams defines parameters for GetModels.
type GetModelsParams struct {
	Type     *GetModelsParamsType `form:"type,omitempty" json:"type,omitempty"`
	Database *string              `form:"database,omitempty" json:"database,omitempty"`
}

// GetModelsParamsType defines parameters for GetModels.
type GetModelsParamsType string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all models
	// (GET /models)
	GetModels(c fiber.Ctx, params GetModelsParams) error
	// Get model by ID
	// (GET /models/{model_id})
	GetModelByID(c fiber.Ctx, modelId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetModels operation middleware
func (siw *ServerInterfaceWrapper) GetModels(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetModelsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "database" -------------

	err = runtime.BindQueryParameter("form", true, false, "database", query, &params.Database)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter database: %w", err).Error())
	}

	return siw.Handler.GetModels(c, params)
}

// GetModelByID operation middleware
func (siw *ServerInterfaceWrapper) GetModelByID(c fiber.Ctx) error {

	var err error

	// ------------- Path parameter "model_id" -------------
	var modelId string

	err = runtime.BindStyledParameterWithOptions("simple", "model_id", c.Params("model_id"), &modelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter model_id: %w", err).Error())
	}

	return siw.Handler.GetModelByID(c, modelId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/models", wrapper.GetModels)

	router.Get(options.BaseURL+"/models/:model_id", wrapper.GetModelByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVUU/cMAz+K5W3x4qWjQfUtwEbO2lMCPGG0JRr3LuwNAmOizid+t+npC3t3RXQpEl7",
	"ai62v8/+7Pi2UNraWYOGPRRbIPTOGo/xx0/L32xjZDiX1jAaDkfhnFalYGVN9uCtCXe+XGMtwukjYQUF",
	"fMhG4Kyz+uwrkSVo2zYFib4k5QIIFHCD3jZUYmIsJ1XkDE59XIDtQostOLIOiVWXYmklhi9vHEIByjCu",
	"kKBNAYeA3uSZlFlFWMLHRhFKKO56t7QDuk8Hb7t8wJIDzpWVqC+QhdJz9KZSqyiKlCoUI/T1xIOpwRlM",
	"KVgshceZ9IIyDo1EU/YcirH2s579hSASm2kk/2WckvNuYqnxDYD3pFUSetdJxQNsOmj3qub+pp/FQ9nr",
	"aN8p8q2xm7Zwpny2LPTcEO3V07MOAYeJhwBlKhuwduf7XKvy93fbeEzOGqVlcmutTr5cL5LKUlILI1bK",
	"rBImYXxlqY6PKxkJFYdOwPnZbQiCFJ6QfAd9fJQf5aEM69AIp6CAz/EqBSd4HcXJRsFWGN9wUDOSLCQU",
	"cIl8NXA5QaJGRvJQ3G1BBY7HBmkDKRhRhzT6no5vHk1TB4V284cU8JmRzI5Y47DMg08mZSTYj71PdzfV",
	"pzz/Z0tqb/hmttUP5Tmx1dCfuKmauha0GYxC66m11z/bxu8vJdt3W3G2WVwcdgOfRe3iKEisRKP5qPHB",
	"lnZShoaPSg5kMB3jbiP9R2WHd3goazQnMtp9mOiT/OQ1yJccs5c/qd02XCJ3HUiWm2Rx0fF5pKdByoY0",
	"FLBmdkWWaVsKvbaei9P8NM+EU9nTMbT37Z8AAAD//9yccL4gBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
