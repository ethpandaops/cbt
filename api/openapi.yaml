openapi: 3.0.0
info:
  title: CBT API
  version: 1.0.0
  description: ClickHouse Build Tool API for managing transformation models
servers:
  - url: http://localhost:8080/api/v1

paths:
  # ============================================
  # CROSS-CUTTING (all models)
  # ============================================
  /models:
    get:
      summary: List all models (lightweight)
      operationId: listAllModels
      tags:
        - Models
      description: |
        Returns a lightweight list of all models across all types.
        Use this for navigation, search, or building dependency graphs.
        For full model details, use type-specific endpoints.
      parameters:
        - name: type
          in: query
          description: Filter by model type
          schema:
            type: string
            enum: [external, transformation]
        - name: database
          in: query
          description: Filter by database name
          schema:
            type: string
          example: analytics
        - name: search
          in: query
          description: Search by model ID or description (case-insensitive)
          schema:
            type: string
          example: daily
      responses:
        '200':
          description: List of all models (summary view)
          content:
            application/json:
              schema:
                type: object
                required: [models, total]
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ModelSummary'
                  total:
                    type: integer
              example:
                models:
                  - id: sources.events
                    type: external
                    database: sources
                    table: events
                    description: Raw event data from production
                  - id: analytics.daily_users
                    type: transformation
                    database: analytics
                    table: daily_users
                    description: Daily active user counts
                total: 2
        '500':
          $ref: '#/components/responses/InternalError'

  # ============================================
  # EXTERNAL MODELS
  # ============================================
  /models/external:
    get:
      summary: List external models
      operationId: listExternalModels
      tags:
        - External Models
      parameters:
        - name: database
          in: query
          description: Filter by database name
          schema:
            type: string
          example: sources
      responses:
        '200':
          description: List of external models
          content:
            application/json:
              schema:
                type: object
                required: [models, total]
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExternalModel'
                  total:
                    type: integer
        '500':
          $ref: '#/components/responses/InternalError'

  /models/external/{id}:
    get:
      summary: Get external model by ID
      operationId: getExternalModel
      tags:
        - External Models
      parameters:
        - name: id
          in: path
          required: true
          description: Fully qualified model ID (database.table)
          schema:
            type: string
          example: sources.clickhouse_prod
      responses:
        '200':
          description: External model details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalModel'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  # ============================================
  # TRANSFORMATION MODELS
  # ============================================
  /models/transformations:
    get:
      summary: List transformation models
      operationId: listTransformations
      tags:
        - Transformations
      parameters:
        - name: database
          in: query
          description: Filter by database name
          schema:
            type: string
          example: analytics
        - name: type
          in: query
          description: Filter by transformation type
          schema:
            type: string
            enum: [scheduled, incremental]
        - name: status
          in: query
          description: Filter by last run status
          schema:
            type: string
            enum: [success, failed, running, pending]
      responses:
        '200':
          description: List of transformation models
          content:
            application/json:
              schema:
                type: object
                required: [models, total]
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransformationModel'
                  total:
                    type: integer
        '500':
          $ref: '#/components/responses/InternalError'

  /models/transformations/{id}:
    get:
      summary: Get transformation model by ID
      operationId: getTransformation
      tags:
        - Transformations
      parameters:
        - name: id
          in: path
          required: true
          description: Fully qualified model ID (database.table)
          schema:
            type: string
          example: analytics.daily_active_users
      responses:
        '200':
          description: Transformation model details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationModel'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    # ============================================
    # SHARED SCHEMAS
    # ============================================
    ModelSummary:
      type: object
      required: [id, type, database, table]
      description: Lightweight model representation for listings
      properties:
        id:
          type: string
          description: Fully qualified ID (database.table)
          example: analytics.daily_users
        type:
          type: string
          enum: [external, transformation]
          description: Model type
        database:
          type: string
          example: analytics
        table:
          type: string
          example: daily_users
        description:
          type: string
          example: Daily active user counts

    # ============================================
    # EXTERNAL MODEL SCHEMAS
    # ============================================
    ExternalModel:
      type: object
      required: [id, database, table]
      properties:
        id:
          type: string
          description: Fully qualified ID (database.table)
          example: ethereum.beacon_blocks
        database:
          type: string
          example: ethereum
        table:
          type: string
          example: beacon_blocks
        description:
          type: string
          example: Beacon chain blocks from production cluster
        cache:
          type: object
          description: Cache configuration for external source
          properties:
            incremental_scan_interval:
              type: string
              description: Interval for incremental cache updates
              example: "10s"
            full_scan_interval:
              type: string
              description: Interval for full cache refresh
              example: "1h"
        lag:
          type: integer
          description: Number of blocks/slots to lag behind head
          example: 10
        metadata:
          type: object
          readOnly: true
          description: System-managed metadata
          properties:
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            last_synced_at:
              type: string
              format: date-time
            row_count:
              type: integer
              description: Approximate row count in destination table
            size_bytes:
              type: integer
              description: Approximate table size in bytes

    # ============================================
    # TRANSFORMATION MODEL SCHEMAS
    # ============================================

    # Base schema with common fields
    TransformationModelBase:
      type: object
      required: [id, database, table, type, content_type, content]
      properties:
        id:
          type: string
          description: Fully qualified ID (database.table)
          example: analytics.daily_active_users
        database:
          type: string
          example: analytics
        table:
          type: string
          example: daily_active_users
        description:
          type: string
          example: Daily aggregation of unique active users
        type:
          type: string
          enum: [scheduled, incremental]
          description: Transformation type (scheduled or incremental)
        content_type:
          type: string
          enum: [sql, exec]
          description: Execution method (SQL query or shell command)
          example: sql
        content:
          type: string
          description: SQL query or exec command defining the transformation
          example: |
            SELECT
              toDate(event_time) AS date,
              uniqExact(user_id) AS active_users
            FROM sources.events
            WHERE event_time >= {{ start_time }}
              AND event_time < {{ end_time }}
            GROUP BY date
        tags:
          type: array
          items:
            type: string
          description: Tags for categorization
          example: [analytics, daily]
        depends_on:
          type: array
          items:
            type: string
          description: Upstream model dependencies
          example: [ethereum.beacon_blocks, ethereum.validator_entity]
        metadata:
          type: object
          readOnly: true
          description: System-managed metadata
          properties:
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            last_run_at:
              type: string
              format: date-time
            last_run_status:
              type: string
              enum: [success, failed, running, pending]
            row_count:
              type: integer
            size_bytes:
              type: integer

    # Scheduled transformation (extends base)
    ScheduledTransformation:
      allOf:
        - $ref: '#/components/schemas/TransformationModelBase'
        - type: object
          required: [schedule]
          properties:
            type:
              type: string
              enum: [scheduled]
            schedule:
              type: string
              description: Cron expression (REQUIRED for scheduled type)
              example: "@every 5m"

    # Incremental transformation (extends base)
    IncrementalTransformation:
      allOf:
        - $ref: '#/components/schemas/TransformationModelBase'
        - type: object
          required: [interval]
          properties:
            type:
              type: string
              enum: [incremental]
            interval:
              type: object
              required: [min, max]
              description: Interval configuration (REQUIRED for incremental type)
              properties:
                min:
                  type: integer
                  description: Minimum interval size (0 = allow any partial size)
                  example: 0
                max:
                  type: integer
                  description: Maximum interval size for processing
                  example: 60
            schedules:
              type: object
              description: Forwardfill and backfill schedules (for incremental type)
              properties:
                forwardfill:
                  type: string
                  description: Forward fill schedule
                  example: "@every 10s"
                backfill:
                  type: string
                  description: Backfill schedule
                  example: "@every 10s"
            limits:
              type: object
              description: Position limits for incremental processing
              properties:
                min:
                  type: integer
                  description: Minimum position limit
                  example: 0
                max:
                  type: integer
                  description: Maximum position limit
                  example: 1000000

    # Union type - handlers will return appropriate concrete type
    # Contains all possible fields (base + type-specific)
    TransformationModel:
      allOf:
        - $ref: '#/components/schemas/TransformationModelBase'
        - type: object
          properties:
            # Scheduled-specific fields (optional)
            schedule:
              type: string
              description: Cron expression (present when type=scheduled)
              example: "@every 5m"
            # Incremental-specific fields (optional)
            interval:
              type: object
              description: Interval configuration (present when type=incremental)
              properties:
                min:
                  type: integer
                  description: Minimum interval size
                max:
                  type: integer
                  description: Maximum interval size
            schedules:
              type: object
              description: Schedules (present when type=incremental)
              properties:
                forwardfill:
                  type: string
                  description: Forward fill schedule
                backfill:
                  type: string
                  description: Backfill schedule
            limits:
              type: object
              description: Limits (present when type=incremental)
              properties:
                min:
                  type: integer
                  description: Minimum position limit
                max:
                  type: integer
                  description: Maximum position limit

    # ============================================
    # ERROR SCHEMAS
    # ============================================
    Error:
      type: object
      required: [error, code]
      properties:
        error:
          type: string
          description: Human-readable error message
        code:
          type: integer
          description: HTTP status code

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Model not found: analytics.nonexistent"
            code: 404

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: 500
