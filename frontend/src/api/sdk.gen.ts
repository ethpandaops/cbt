// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type {
  DebugCoverageAtPositionData,
  DebugCoverageAtPositionErrors,
  DebugCoverageAtPositionResponses,
  GetExternalBoundsData,
  GetExternalBoundsErrors,
  GetExternalBoundsResponses,
  GetExternalModelData,
  GetExternalModelErrors,
  GetExternalModelResponses,
  GetIntervalTypesData,
  GetIntervalTypesErrors,
  GetIntervalTypesResponses,
  GetScheduledRunData,
  GetScheduledRunErrors,
  GetScheduledRunResponses,
  GetTransformationCoverageData,
  GetTransformationCoverageErrors,
  GetTransformationCoverageResponses,
  GetTransformationData,
  GetTransformationErrors,
  GetTransformationResponses,
  ListAllModelsData,
  ListAllModelsErrors,
  ListAllModelsResponses,
  ListExternalBoundsData,
  ListExternalBoundsErrors,
  ListExternalBoundsResponses,
  ListExternalModelsData,
  ListExternalModelsErrors,
  ListExternalModelsResponses,
  ListScheduledRunsData,
  ListScheduledRunsErrors,
  ListScheduledRunsResponses,
  ListTransformationCoverageData,
  ListTransformationCoverageErrors,
  ListTransformationCoverageResponses,
  ListTransformationsData,
  ListTransformationsErrors,
  ListTransformationsResponses,
} from './types.gen';
import {
  zDebugCoverageAtPositionData,
  zDebugCoverageAtPositionResponse,
  zGetExternalBoundsData,
  zGetExternalBoundsResponse,
  zGetExternalModelData,
  zGetExternalModelResponse,
  zGetIntervalTypesData,
  zGetIntervalTypesResponse,
  zGetScheduledRunData,
  zGetScheduledRunResponse,
  zGetTransformationCoverageData,
  zGetTransformationCoverageResponse,
  zGetTransformationData,
  zGetTransformationResponse,
  zListAllModelsData,
  zListAllModelsResponse,
  zListExternalBoundsData,
  zListExternalBoundsResponse,
  zListExternalModelsData,
  zListExternalModelsResponse,
  zListScheduledRunsData,
  zListScheduledRunsResponse,
  zListTransformationCoverageData,
  zListTransformationCoverageResponse,
  zListTransformationsData,
  zListTransformationsResponse,
} from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List all models (lightweight)
 *
 * Returns a lightweight list of all models across all types.
 * Use this for navigation, search, or building dependency graphs.
 * For full model details, use type-specific endpoints.
 *
 */
export const listAllModels = <ThrowOnError extends boolean = false>(
  options?: Options<ListAllModelsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListAllModelsResponses, ListAllModelsErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zListAllModelsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zListAllModelsResponse.parseAsync(data);
    },
    url: '/models',
    ...options,
  });
};

/**
 * List external models
 */
export const listExternalModels = <ThrowOnError extends boolean = false>(
  options?: Options<ListExternalModelsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListExternalModelsResponses, ListExternalModelsErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zListExternalModelsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zListExternalModelsResponse.parseAsync(data);
    },
    url: '/models/external',
    ...options,
  });
};

/**
 * Get external model by ID
 */
export const getExternalModel = <ThrowOnError extends boolean = false>(
  options: Options<GetExternalModelData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetExternalModelResponses, GetExternalModelErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zGetExternalModelData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetExternalModelResponse.parseAsync(data);
    },
    url: '/models/external/{id}',
    ...options,
  });
};

/**
 * List transformation models
 */
export const listTransformations = <ThrowOnError extends boolean = false>(
  options?: Options<ListTransformationsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListTransformationsResponses, ListTransformationsErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zListTransformationsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zListTransformationsResponse.parseAsync(data);
    },
    url: '/models/transformations',
    ...options,
  });
};

/**
 * Get transformation model by ID
 */
export const getTransformation = <ThrowOnError extends boolean = false>(
  options: Options<GetTransformationData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetTransformationResponses, GetTransformationErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zGetTransformationData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetTransformationResponse.parseAsync(data);
    },
    url: '/models/transformations/{id}',
    ...options,
  });
};

/**
 * List external model bounds
 *
 * Returns min/max positions from Redis cache for all external models
 */
export const listExternalBounds = <ThrowOnError extends boolean = false>(
  options?: Options<ListExternalBoundsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListExternalBoundsResponses, ListExternalBoundsErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zListExternalBoundsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zListExternalBoundsResponse.parseAsync(data);
    },
    url: '/models/external/bounds',
    ...options,
  });
};

/**
 * Get external model bounds by ID
 *
 * Returns min/max positions and scan metadata from Redis cache
 */
export const getExternalBounds = <ThrowOnError extends boolean = false>(
  options: Options<GetExternalBoundsData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetExternalBoundsResponses, GetExternalBoundsErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zGetExternalBoundsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetExternalBoundsResponse.parseAsync(data);
    },
    url: '/models/external/{id}/bounds',
    ...options,
  });
};

/**
 * List transformation coverage
 *
 * Returns processed ranges from admin_incremental table for all incremental transformations
 */
export const listTransformationCoverage = <ThrowOnError extends boolean = false>(
  options?: Options<ListTransformationCoverageData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ListTransformationCoverageResponses,
    ListTransformationCoverageErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zListTransformationCoverageData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zListTransformationCoverageResponse.parseAsync(data);
    },
    url: '/models/transformations/coverage',
    ...options,
  });
};

/**
 * Get transformation coverage by ID
 *
 * Returns all processed ranges from admin_incremental table
 */
export const getTransformationCoverage = <ThrowOnError extends boolean = false>(
  options: Options<GetTransformationCoverageData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    GetTransformationCoverageResponses,
    GetTransformationCoverageErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zGetTransformationCoverageData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetTransformationCoverageResponse.parseAsync(data);
    },
    url: '/models/transformations/{id}/coverage',
    ...options,
  });
};

/**
 * Debug coverage and dependency status for a specific position
 *
 * Comprehensive debugging endpoint that returns detailed coverage and dependency information
 * for a specific position. This uses the same validation logic as backfill gap detection
 * and dependency checking, providing a single source of truth for debugging why a position
 * cannot be processed.
 *
 * Returns:
 * - Model's own coverage status for the position
 * - Dependency tree with coverage/bounds for each dependency
 * - Gap detection results
 * - Validation results (can process / cannot process + reasons)
 * - Recursive dependency analysis all the way down
 *
 */
export const debugCoverageAtPosition = <ThrowOnError extends boolean = false>(
  options: Options<DebugCoverageAtPositionData, ThrowOnError>
) => {
  return (options.client ?? client).get<DebugCoverageAtPositionResponses, DebugCoverageAtPositionErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zDebugCoverageAtPositionData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zDebugCoverageAtPositionResponse.parseAsync(data);
    },
    url: '/models/transformations/{id}/coverage/{position}',
    ...options,
  });
};

/**
 * Get interval type transformations
 *
 * Returns the configured interval type transformations.
 * Each interval type defines how values can be represented and transformed.
 * For example, 'slot' might transform to 'timestamp' via CEL expression.
 *
 */
export const getIntervalTypes = <ThrowOnError extends boolean = false>(
  options?: Options<GetIntervalTypesData, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetIntervalTypesResponses, GetIntervalTypesErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zGetIntervalTypesData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetIntervalTypesResponse.parseAsync(data);
    },
    url: '/interval/types',
    ...options,
  });
};

/**
 * List scheduled transformation runs
 *
 * Returns last run timestamps from admin_scheduled table for all scheduled transformations
 */
export const listScheduledRuns = <ThrowOnError extends boolean = false>(
  options?: Options<ListScheduledRunsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<ListScheduledRunsResponses, ListScheduledRunsErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zListScheduledRunsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zListScheduledRunsResponse.parseAsync(data);
    },
    url: '/models/transformations/runs',
    ...options,
  });
};

/**
 * Get scheduled transformation run by ID
 *
 * Returns last run timestamp from admin_scheduled table
 */
export const getScheduledRun = <ThrowOnError extends boolean = false>(
  options: Options<GetScheduledRunData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetScheduledRunResponses, GetScheduledRunErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zGetScheduledRunData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetScheduledRunResponse.parseAsync(data);
    },
    url: '/models/transformations/{id}/runs',
    ...options,
  });
};
