// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import {
  getExternalModel,
  getTransformation,
  listAllModels,
  listExternalModels,
  listTransformations,
  type Options,
} from '../sdk.gen';
import type {
  GetExternalModelData,
  GetTransformationData,
  ListAllModelsData,
  ListExternalModelsData,
  ListTransformationsData,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const listAllModelsQueryKey = (options?: Options<ListAllModelsData>) => createQueryKey('listAllModels', options);

/**
 * List all models (lightweight)
 * Returns a lightweight list of all models across all types.
 * Use this for navigation, search, or building dependency graphs.
 * For full model details, use type-specific endpoints.
 *
 */
export const listAllModelsOptions = (options?: Options<ListAllModelsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listAllModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listAllModelsQueryKey(options),
  });
};

export const listExternalModelsQueryKey = (options?: Options<ListExternalModelsData>) =>
  createQueryKey('listExternalModels', options);

/**
 * List external models
 */
export const listExternalModelsOptions = (options?: Options<ListExternalModelsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listExternalModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listExternalModelsQueryKey(options),
  });
};

export const getExternalModelQueryKey = (options: Options<GetExternalModelData>) =>
  createQueryKey('getExternalModel', options);

/**
 * Get external model by ID
 */
export const getExternalModelOptions = (options: Options<GetExternalModelData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExternalModel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExternalModelQueryKey(options),
  });
};

export const listTransformationsQueryKey = (options?: Options<ListTransformationsData>) =>
  createQueryKey('listTransformations', options);

/**
 * List transformation models
 */
export const listTransformationsOptions = (options?: Options<ListTransformationsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listTransformations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listTransformationsQueryKey(options),
  });
};

export const getTransformationQueryKey = (options: Options<GetTransformationData>) =>
  createQueryKey('getTransformation', options);

/**
 * Get transformation model by ID
 */
export const getTransformationOptions = (options: Options<GetTransformationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTransformation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTransformationQueryKey(options),
  });
};
