// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import {
  debugCoverageAtPosition,
  getExternalBounds,
  getExternalModel,
  getIntervalTypes,
  getScheduledRun,
  getTransformation,
  getTransformationCoverage,
  listAllModels,
  listExternalBounds,
  listExternalModels,
  listScheduledRuns,
  listTransformationCoverage,
  listTransformations,
  type Options,
} from '../sdk.gen';
import type {
  DebugCoverageAtPositionData,
  GetExternalBoundsData,
  GetExternalModelData,
  GetIntervalTypesData,
  GetScheduledRunData,
  GetTransformationCoverageData,
  GetTransformationData,
  ListAllModelsData,
  ListExternalBoundsData,
  ListExternalModelsData,
  ListScheduledRunsData,
  ListTransformationCoverageData,
  ListTransformationsData,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const listAllModelsQueryKey = (options?: Options<ListAllModelsData>) => createQueryKey('listAllModels', options);

/**
 * List all models (lightweight)
 *
 * Returns a lightweight list of all models across all types.
 * Use this for navigation, search, or building dependency graphs.
 * For full model details, use type-specific endpoints.
 *
 */
export const listAllModelsOptions = (options?: Options<ListAllModelsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listAllModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listAllModelsQueryKey(options),
  });
};

export const listExternalModelsQueryKey = (options?: Options<ListExternalModelsData>) =>
  createQueryKey('listExternalModels', options);

/**
 * List external models
 */
export const listExternalModelsOptions = (options?: Options<ListExternalModelsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listExternalModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listExternalModelsQueryKey(options),
  });
};

export const getExternalModelQueryKey = (options: Options<GetExternalModelData>) =>
  createQueryKey('getExternalModel', options);

/**
 * Get external model by ID
 */
export const getExternalModelOptions = (options: Options<GetExternalModelData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExternalModel({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExternalModelQueryKey(options),
  });
};

export const listTransformationsQueryKey = (options?: Options<ListTransformationsData>) =>
  createQueryKey('listTransformations', options);

/**
 * List transformation models
 */
export const listTransformationsOptions = (options?: Options<ListTransformationsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listTransformations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listTransformationsQueryKey(options),
  });
};

export const getTransformationQueryKey = (options: Options<GetTransformationData>) =>
  createQueryKey('getTransformation', options);

/**
 * Get transformation model by ID
 */
export const getTransformationOptions = (options: Options<GetTransformationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTransformation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTransformationQueryKey(options),
  });
};

export const listExternalBoundsQueryKey = (options?: Options<ListExternalBoundsData>) =>
  createQueryKey('listExternalBounds', options);

/**
 * List external model bounds
 *
 * Returns min/max positions from Redis cache for all external models
 */
export const listExternalBoundsOptions = (options?: Options<ListExternalBoundsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listExternalBounds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listExternalBoundsQueryKey(options),
  });
};

export const getExternalBoundsQueryKey = (options: Options<GetExternalBoundsData>) =>
  createQueryKey('getExternalBounds', options);

/**
 * Get external model bounds by ID
 *
 * Returns min/max positions and scan metadata from Redis cache
 */
export const getExternalBoundsOptions = (options: Options<GetExternalBoundsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getExternalBounds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getExternalBoundsQueryKey(options),
  });
};

export const listTransformationCoverageQueryKey = (options?: Options<ListTransformationCoverageData>) =>
  createQueryKey('listTransformationCoverage', options);

/**
 * List transformation coverage
 *
 * Returns processed ranges from admin_incremental table for all incremental transformations
 */
export const listTransformationCoverageOptions = (options?: Options<ListTransformationCoverageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listTransformationCoverage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listTransformationCoverageQueryKey(options),
  });
};

export const getTransformationCoverageQueryKey = (options: Options<GetTransformationCoverageData>) =>
  createQueryKey('getTransformationCoverage', options);

/**
 * Get transformation coverage by ID
 *
 * Returns all processed ranges from admin_incremental table
 */
export const getTransformationCoverageOptions = (options: Options<GetTransformationCoverageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTransformationCoverage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTransformationCoverageQueryKey(options),
  });
};

export const debugCoverageAtPositionQueryKey = (options: Options<DebugCoverageAtPositionData>) =>
  createQueryKey('debugCoverageAtPosition', options);

/**
 * Debug coverage and dependency status for a specific position
 *
 * Comprehensive debugging endpoint that returns detailed coverage and dependency information
 * for a specific position. This uses the same validation logic as backfill gap detection
 * and dependency checking, providing a single source of truth for debugging why a position
 * cannot be processed.
 *
 * Returns:
 * - Model's own coverage status for the position
 * - Dependency tree with coverage/bounds for each dependency
 * - Gap detection results
 * - Validation results (can process / cannot process + reasons)
 * - Recursive dependency analysis all the way down
 *
 */
export const debugCoverageAtPositionOptions = (options: Options<DebugCoverageAtPositionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await debugCoverageAtPosition({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: debugCoverageAtPositionQueryKey(options),
  });
};

export const getIntervalTypesQueryKey = (options?: Options<GetIntervalTypesData>) =>
  createQueryKey('getIntervalTypes', options);

/**
 * Get interval type transformations
 *
 * Returns the configured interval type transformations.
 * Each interval type defines how values can be represented and transformed.
 * For example, 'slot' might transform to 'timestamp' via CEL expression.
 *
 */
export const getIntervalTypesOptions = (options?: Options<GetIntervalTypesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getIntervalTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getIntervalTypesQueryKey(options),
  });
};

export const listScheduledRunsQueryKey = (options?: Options<ListScheduledRunsData>) =>
  createQueryKey('listScheduledRuns', options);

/**
 * List scheduled transformation runs
 *
 * Returns last run timestamps from admin_scheduled table for all scheduled transformations
 */
export const listScheduledRunsOptions = (options?: Options<ListScheduledRunsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listScheduledRuns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listScheduledRunsQueryKey(options),
  });
};

export const getScheduledRunQueryKey = (options: Options<GetScheduledRunData>) =>
  createQueryKey('getScheduledRun', options);

/**
 * Get scheduled transformation run by ID
 *
 * Returns last run timestamp from admin_scheduled table
 */
export const getScheduledRunOptions = (options: Options<GetScheduledRunData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getScheduledRun({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getScheduledRunQueryKey(options),
  });
};
