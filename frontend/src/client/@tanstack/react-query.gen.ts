// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { getModelById, getModels, type Options } from '../sdk.gen';
import type { GetModelByIdData, GetModelsData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getModelsQueryKey = (options?: Options<GetModelsData>) => createQueryKey('getModels', options);

/**
 * List all models
 */
export const getModelsOptions = (options?: Options<GetModelsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getModelsQueryKey(options),
  });
};

export const getModelByIdQueryKey = (options: Options<GetModelByIdData>) => createQueryKey('getModelById', options);

/**
 * Get model by ID
 */
export const getModelByIdOptions = (options: Options<GetModelByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getModelById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getModelByIdQueryKey(options),
  });
};
