// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type {
  GetModelByIdData,
  GetModelByIdErrors,
  GetModelByIdResponses,
  GetModelsData,
  GetModelsResponses,
} from './types.gen';
import { zGetModelByIdData, zGetModelByIdResponse, zGetModelsData, zGetModelsResponse } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List all models
 */
export const getModels = <ThrowOnError extends boolean = false>(options?: Options<GetModelsData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetModelsResponses, unknown, ThrowOnError>({
    requestValidator: async data => {
      return await zGetModelsData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetModelsResponse.parseAsync(data);
    },
    url: '/models',
    ...options,
  });
};

/**
 * Get model by ID
 */
export const getModelById = <ThrowOnError extends boolean = false>(
  options: Options<GetModelByIdData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetModelByIdResponses, GetModelByIdErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zGetModelByIdData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zGetModelByIdResponse.parseAsync(data);
    },
    url: '/models/{model_id}',
    ...options,
  });
};
